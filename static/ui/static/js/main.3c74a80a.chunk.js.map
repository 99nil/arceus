{"version":3,"sources":["serviceWorker.ts","utils/request.ts","api/resource.ts","api/template.ts","components/KindList.tsx","base/base.ts","base/index.ts","components/CTree.tsx","components/NavBar.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","codeMessage","200","201","202","204","400","401","403","404","406","410","422","500","502","503","504","requestWithExtend","extend","errorHandler","error","response","data","status","errorText","Object","keys","length","statusText","console","log","notification","message","description","headers","host","protocol","request","url","a","option","getResponse","prefix","result","list","type","params","tree","uploadURL","generateURL","createURL","filter","inputValue","path","some","label","toLowerCase","indexOf","SourceType","KindList","props","generateResource","value","generateWithObjAndData","templateInfo","group","kind","version","then","v","template","getOptions","that","setState","options","customOptions","templateList","templateOptions","state","className","placeholder","this","onChange","showSearch","matchInputWidth","changeOnSelect","React","Component","convertValueByType","val","Integer","parseInt","Number","parseFloat","randomString","chars","i","Math","floor","random","sortObj","obj","newObj","sort","map","key","getTreeNodeByPath","nodes","node","item","children","updateTreeNodeByPath","newNodes","newNode","push","downloadData","element","document","createElement","setAttribute","encodeURIComponent","filename","style","display","body","appendChild","click","removeChild","confirm","Modal","CTree","buildFullData","cutPrefix","k","hasOwnProperty","_children","required","vv","name","child","stats","isRequired","isEdit","replace","title","createAppendArrayNode","createMenuTitle","createAppendObjectNode","desc","createPrefixNode","createSelectNode","enums","createInputNode","buildFullDataWithObj","tNode","createKVInputNode","String","toString","convertToYaml","buildYamlData","parseTreeToObj","yamlData","str","jsyaml","safeDump","objToYaml","showParseConfirm","fn","icon","ExclamationCircleOutlined","content","onOk","onCancel","convertToTreeData","code","arr","safeLoadAll","yamlToObjMulti","e","apiVersion","versionData","split","unshift","fullData","expandedKeys","getExpandedKeys","catch","reason","current","yamlStr","safeLoad","Array","va","selectData","optionData","JSON","stringify","defaultValue","changeSelectValue","height","minHeight","data-path","changeInputValue","width","createDeleteNode","createArrInputNode","MinusCircleOutlined","danger","onClick","removeObjItem","PlusCircleOutlined","marginTop","addArrItem","source","PlusSquareOutlined","addObjItem","createTitle","tipContent","trigger","arrowPointAtCenter","createDeleteMenu","isArray","removeItem","margin","childs","descs","notExistChildren","set","index","data-name","addItemFromMenu","maxWidth","syncItemMenu","addSet","delSet","s","delStatus","c","addIndex","ck","splice","cs","currentTarget","getAttribute","keyPath","pathArr","pathLen","parentPath","slice","join","valObj","parse","isVal","onSelect","selectedKeys","onExpand","currentKey","currentExpandedKeys","foldAll","unfoldAll","kindRef","createRef","ref","showLine","treeData","uploadProps","action","showUploadList","maxCount","info","file","success","generateProps","templateProps","NavBar","fold","unfold","build","buildData","parseData","copyData","text","select","execCommand","configOpen","configVisible","configClose","top","offsetTop","SettingOutlined","MinusSquareOutlined","DoubleLeftOutlined","DoubleRightOutlined","CopyOutlined","DownloadOutlined","placement","closable","visible","onClose","block","require","App","buildCodeData","defaultData","navBarRef","cTreeRef","codeData","mode","theme","lineNumbers","editorDidMount","editor","setSize","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3c74a80a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","/**\n * request 网络请求工具\n * 更详细的 api 文档: https://github.com/umijs/umi-request\n */\nimport {extend} from 'umi-request';\nimport {notification} from 'antd';\n\nconst codeMessage: { [code: number]: string } = {\n    200: '服务器成功返回请求的数据。',\n    201: '新建或修改数据成功。',\n    202: '一个请求已经进入后台排队（异步任务）。',\n    204: '删除数据成功。',\n    400: '发出的请求有错误，服务器没有进行新建或修改数据的操作。',\n    401: '用户没有权限（令牌、用户名、密码错误）。',\n    403: '用户得到授权，但是访问是被禁止的。',\n    404: '发出的请求针对的是不存在的记录，服务器没有进行操作。',\n    406: '请求的格式不可得。',\n    410: '请求的资源被永久删除，且不会再得到的。',\n    422: '当创建一个对象时，发生一个验证错误。',\n    500: '服务器发生错误，请检查服务器。',\n    502: '网关错误。',\n    503: '服务不可用，服务器暂时过载或维护。',\n    504: '网关超时。',\n};\n\n/**\n * 异常处理程序\n */\nconst errorHandler = (error: { response: Response, data: any }): Response => {\n    const {response, data} = error;\n    if (response && response.status) {\n        const errorText = data && (typeof data === 'object' ? Object.keys(data).length > 0 : true) ? data : (codeMessage[response.status] || response.statusText);\n        // const {status, url} = response;\n        console.log(errorText)\n        notification.error({\n            message: `操作失败`,\n            description: errorText,\n        });\n    } else if (!response) {\n        notification.error({\n            message: '网络异常',\n            description: '您的网络发生异常，无法连接服务器',\n        });\n    }\n    return response;\n};\n\n/**\n * 配置request请求时的默认参数\n */\nconst requestWithExtend = extend({\n    errorHandler, // 默认错误处理\n    // credentials: 'include', // 默认请求是否带上cookie\n    headers: {\n        'Content-Type': 'application/json;charset=utf-8',\n    },\n});\n\nexport const host = window.location.protocol + '//' + window.location.host\n// export const host = 'http://localhost:2638'\n\n/**\n * 封装一次request，使response可以统一校验后使用\n */\nconst request = async (url: string, option: any = {}) => {\n    let result = await requestWithExtend(host + url, {\n        getResponse: true,\n        ...option,\n        prefix: ''\n    })\n    return result ? result.data : null\n}\n\nexport default request;\n","import request, {host} from \"../utils/request\";\n\nexport interface InfoParamsType {\n    group: string;\n    kind: string;\n    version: string;\n}\n\nexport async function list(type: string = ''): Promise<any> {\n    return request('/resource/list', {params: {type}})\n}\n\nexport async function info(params: InfoParamsType): Promise<any> {\n    return request('/resource/info', {params})\n}\n\nexport async function tree(params: InfoParamsType): Promise<any> {\n    return request('/resource/tree', {params})\n}\n\nexport const uploadURL = host + '/resource/upload'\n\nexport const generateURL = host + '/resource/generate'\n","import request, {host} from \"../utils/request\";\nimport {InfoParamsType} from \"./resource\";\n\nexport async function list(): Promise<any> {\n    return request('/template')\n}\n\nexport async function info(params: InfoParamsType): Promise<any> {\n    return request('/template/info', {params})\n}\n\nexport const createURL = host + '/template'\n","import React from \"react\";\nimport {Cascader} from 'antd';\nimport {list} from \"../api/resource\";\nimport {info as templateInfo, list as templateList} from \"../api/template\";\nimport {CascaderOptionType} from \"antd/lib/cascader\";\n\nfunction filter(inputValue: string, path: CascaderOptionType[]) {\n    if (path.length !== 3) return false\n    return path.some((option: any) => option.label.toLowerCase().indexOf(inputValue.toLowerCase()) > -1);\n}\n\nclass KindList extends React.Component<any, any> {\n\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            options: [],\n            customOptions: [],\n            templateOptions: [],\n        }\n        this.getOptions()\n    }\n\n    /**\n     * 生成原数据\n     * @param value\n     */\n    generateResource = (value: any) => {\n        if (value.length !== 3) return\n        if (this.props.generateResource)\n            this.props.generateResource(value[0], value[1], value[2])\n    }\n\n    generateWithObjAndData = (value: any) => {\n        if (value.length !== 3) return\n        if (this.props.generateWithObjAndData)\n            templateInfo({\n                group: value[0],\n                kind: value[1],\n                version: value[2],\n            }).then((result: any) => {\n                if (!result) return\n                for (const v of result) {\n                    this.props.generateWithObjAndData(v.data, v.template)\n                }\n            })\n    }\n\n    getOptions = () => {\n        const that = this\n        list().then((result: any) => {\n            if (!result) return\n            that.setState({options: result})\n        })\n        list('custom').then((result: any) => {\n            if (!result) return\n            that.setState({customOptions: result})\n        })\n        templateList().then((result: any) => {\n            if (!result) return\n            that.setState({templateOptions: result})\n        })\n    }\n\n    render() {\n        return <div>\n            <Cascader\n                className=\"ml10\"\n                placeholder=\"Base Resource Select\"\n                options={this.state.options || []}\n                onChange={value => this.generateResource(value)}\n                showSearch={{filter, matchInputWidth: false}}\n                changeOnSelect\n            /><br/>\n            <Cascader\n                className=\"ml10 mt5\"\n                placeholder=\"Custom Resource Select\"\n                options={this.state.customOptions || []}\n                onChange={value => this.generateResource(value)}\n                showSearch={{filter, matchInputWidth: false}}\n                changeOnSelect\n            /><br/>\n            <Cascader\n                className=\"ml10 mt5\"\n                placeholder=\"Template Select\"\n                options={this.state.templateOptions || []}\n                onChange={value => this.generateWithObjAndData(value)}\n                showSearch={{filter, matchInputWidth: false}}\n                changeOnSelect\n            />\n        </div>\n    }\n}\n\nexport default KindList\n","import * as React from \"react\";\n\nexport const ArrayNode = '-'\n\nexport enum SourceType {\n    String = 'string',      // 字符串\n    Number = 'number',      // 数值\n    Boolean = 'boolean',    // 布尔\n    Object = 'object',      // 对象\n    Array = 'array',        // 数组\n    Integer = 'integer',    // 整型\n}\n\nexport interface ND {\n    name: string\n    desc: string\n}\n\nexport interface TNode {\n    key: string,            // 全局唯一，格式为 index.path 如 pod.spec.containers.0.name\n    name: string,\n    title: React.ReactNode,\n    type: SourceType,\n    value: string,\n    children: TNode[],\n}\n","import {SourceType, TNode} from \"./base\";\nimport jsyaml from \"js-yaml\";\nimport {message} from \"antd\";\n\n/**\n * 根据path获取Object\n * @param obj\n * @param paths\n * @return any\n */\nexport function getObjByPath(obj: any, paths: string[]): any {\n    for (const v of paths) {\n        if (!obj.hasOwnProperty(v)) {\n            return null\n        }\n        obj = obj[v]\n    }\n    return obj\n}\n\n/**\n * 根据path更新Object\n * @param obj\n * @param paths\n * @param value\n * @return any\n */\nexport function updateObjByPath(obj: any, paths: string[], value: any): any {\n    const pl = paths.length\n    if (pl === 0) {\n        return obj\n    }\n    let newObj: any = Array.isArray(obj) ? [] : {}\n    let exist: boolean = pl > 1\n    for (const k in obj) {\n        if (!obj.hasOwnProperty(k)) {\n            continue\n        }\n        const v = obj[k]\n        if (paths[0] === k) {\n            if (pl === 1) {\n                exist = true\n                newObj[k] = value\n                continue\n            }\n            if (typeof v === 'object') {\n                newObj[k] = updateObjByPath(v, paths.slice(1), value)\n                continue\n            }\n        }\n        newObj[k] = v\n    }\n    if (!exist) {\n        newObj[paths[0]] = value\n    }\n    return newObj\n}\n\n/**\n * 首字母小写\n * @param str\n * @return string\n */\nexport function strToLowerCase(str: string): string {\n    return str.replace(str[0], str[0].toLowerCase())\n}\n\n/**\n * 根据类型修改值\n * @param val\n * @param type\n */\nexport function convertValueByType(val: any, type: SourceType): any {\n    switch (type) {\n        case SourceType.Integer:\n            return parseInt(val)\n        case SourceType.Number:\n            return parseFloat(val)\n        default:\n            return val\n    }\n}\n\n/**\n * 生成随机字符串\n * @param length\n * @return string\n */\nexport function randomString(length: number): string {\n    const chars: string = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    let result = ''\n    for (let i = length; i > 0; --i) result += chars[Math.floor(Math.random() * chars.length)]\n    return result\n}\n\n/**\n * object根据key排序\n * @param obj\n */\nfunction sortObj(obj: any): any {\n    let newObj: any = {};\n    Object.keys(obj).sort().map((key: any) => newObj[key] = obj[key])\n    return newObj\n}\n\n/**\n * 对象深拷贝\n * @param obj\n */\nexport function deepClone(obj: any): any {\n    let o: any = {}\n    if (typeof obj != \"object\") return obj\n    if (obj === null) return null\n    if (obj instanceof Array) {\n        o = [];\n        for (let i = 0, len = obj.length; i < len; i++) {\n            o.push(deepClone(obj[i]))\n        }\n    } else {\n        for (let j in obj) {\n            if (!obj.hasOwnProperty(j)) continue\n            o[j] = deepClone(obj[j])\n        }\n    }\n    return o;\n}\n\n/**\n * 根据key获取树节点信息\n * @param key\n * @param nodes\n * @return TNode | null\n */\nexport function getTreeNodeByPath(key: string, nodes: any[]): any {\n    let node: any\n    for (const item of nodes) {\n        if (item.key === key) return item\n        node = getTreeNodeByPath(key, item.children)\n        if (node) return node\n    }\n    return node\n}\n\n/**\n * 根据key更新树节点信息\n * @param key\n * @param nodes\n * @param value\n * @return TNode[]\n */\nexport function updateTreeNodeByPath(key: string, nodes: TNode[], value: TNode | null): TNode[] {\n    let newNodes: TNode[] = []\n    for (const node of nodes) {\n        let newNode = {...node}\n        if (newNode.key === key) {\n            if (value) newNodes.push(value)\n            continue\n        }\n        newNode.children = updateTreeNodeByPath(key, newNode.children, value)\n        newNodes.push(newNode)\n    }\n    return newNodes\n}\n\n/**\n * obj转yaml\n * @param obj\n * @return string\n */\nexport function objToYaml(obj: any): string {\n    let str = ''\n    // 处理首次循环，获取类型拼接kind\n    for (const key in obj) {\n        if (!obj.hasOwnProperty(key)) continue\n        str += `---\\n`\n        str += jsyaml.safeDump(sortObj(obj[key]))\n    }\n    str += str !== '' ? '---' : ''\n    return str\n}\n\n/**\n * yaml转obj\n * @param str\n */\nexport function yamlToObj(str: string): any {\n    const obj = jsyaml.safeLoad(str)\n    return obj || {}\n}\n\n/**\n * yaml转obj\n * @param str\n * @return any\n */\nexport function yamlToObjMulti(str: string): any {\n    let obj: any = {}\n    // maybe object or array\n    const arr = jsyaml.safeLoadAll(str)\n    for (const item of arr) {\n        if (!item) continue\n        // 处理kind\n        if (!item.hasOwnProperty('kind')) continue\n        const key = item.kind + '-' + randomString(6)\n        obj[key] = item\n    }\n    return obj\n}\n\nexport function downloadData(data: any) {\n    if (!data) {\n        message.error('无内容可下载')\n        return\n    }\n    const element = document.createElement('a');\n    element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(data));\n    const filename = randomString(6) + '.yml'\n    element.setAttribute('download', filename);\n    element.style.display = 'none';\n    document.body.appendChild(element);\n    element.click();\n    document.body.removeChild(element);\n}\n","import React from \"react\";\nimport {Button, Input, message, Popover, Select, Tree, Modal} from \"antd\";\nimport {MinusCircleOutlined, PlusCircleOutlined, PlusSquareOutlined, ExclamationCircleOutlined} from '@ant-design/icons'\nimport KindList from \"./KindList\";\nimport {ArrayNode, ND, SourceType, TNode} from \"../base/base\";\nimport {\n    convertValueByType,\n    getTreeNodeByPath,\n    objToYaml,\n    randomString,\n    updateTreeNodeByPath, yamlToObj, yamlToObjMulti,\n} from \"../base\";\nimport {InfoParamsType, tree} from \"../api/resource\";\nimport TextArea from \"antd/lib/input/TextArea\";\n\nconst {confirm} = Modal;\n\nclass CTree extends React.Component<any, any> {\n\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            kindRef: React.createRef(),\n            data: [],\n            expandedKeys: [],\n        }\n    }\n\n    /**\n     * 构建完整数据结构\n     * @param data 元数据\n     * @param prefix 额外添加的前缀\n     * @param cutPrefix 需要被替换的前缀\n     */\n    buildFullData = (data: any, prefix: string = '', cutPrefix: string = ''): any => {\n        if (prefix === '') prefix = randomString(6)\n        let result: any = {}\n        for (let k in data) {\n            if (!data.hasOwnProperty(k)) continue\n            result[k] = data[k]\n        }\n        result.children = []\n        result._children = []\n        let children = data.children\n        if (data._children && data._children.length > 0) children = data._children\n        for (let k in children) {\n            if (!children.hasOwnProperty(k)) continue\n            result._children.push(this.buildFullData(children[k], prefix, cutPrefix))\n        }\n        if (data.required && data.required.length > 0) {\n            for (let vv of data.children) {\n                if (data.required.indexOf(vv.name) === -1) continue\n                let child = this.buildFullData(vv, prefix, cutPrefix)\n                child.stats = {\n                    isRequired: true,\n                    isEdit: true,\n                }\n                // 设置默认字段不允许编辑\n                if (['root.apiVersion', 'root.kind'].indexOf(child.key) !== -1) child.stats.isEdit = false\n                result.children.push(child)\n            }\n        }\n\n        // 添加节点状态\n        if (!result.stats) result.stats = {\n            isRequired: false,\n            isEdit: true,\n        }\n        // 重构节点唯一key\n        if (cutPrefix !== '') {\n            result.key = result.key.replace(cutPrefix, prefix)\n        } else {\n            result.key = prefix + '.' + result.key\n        }\n        // 构建Base Element元素标题\n        switch (result.type) {\n            case 'array':\n                result.title = this.createAppendArrayNode(\n                    result.key,\n                    this.createMenuTitle(result.key, result)\n                )\n                break\n            case 'object': // 对象节点，object string/string\n                if (result._children.length === 0) {\n                    result.title = this.createAppendObjectNode(result.key, result)\n                } else {\n                    result.title = this.createMenuTitle(result.key, result)\n                }\n                break\n            case 'boolean':\n                const options: ND[] = [\n                    {name: 'false', desc: 'false'},\n                    {name: 'true', desc: 'true'},\n                ]\n                if (result.value === '') result.value = options[0].name\n                result.title = this.createPrefixNode(\n                    this.createMenuTitle(result.key, result),\n                    this.createSelectNode(result.key, options, result.value)\n                )\n                break\n            default:\n                // 构建Select Element元素标题\n                if (result.enums && result.enums.length > 0) {\n                    let options: ND[] = []\n                    for (const v of result.enums) {\n                        options.push({\n                            name: v,\n                            desc: v,\n                        })\n                    }\n                    if (result.value === '' && options.length > 0) result.value = options[0].name\n                    result.title = this.createPrefixNode(\n                        this.createMenuTitle(result.key, result),\n                        this.createSelectNode(result.key, options, result.value)\n                    )\n                } else {\n                    result.title = this.createPrefixNode(\n                        this.createMenuTitle(result.key, result),\n                        this.createInputNode(result.key, result.value)\n                    )\n                }\n                break\n        }\n        return result\n    }\n\n    /**\n     * 根据obj值构建完整数据结构\n     * @param data\n     * @param prefix\n     * @param cutPrefix\n     * @param obj\n     */\n    buildFullDataWithObj = (data: any, prefix: string = '', cutPrefix: string = '', obj: any = {}): any => {\n        if (prefix === '') prefix = randomString(6)\n        let result: any = {}\n        for (let k in data) {\n            if (!data.hasOwnProperty(k)) continue\n            result[k] = data[k]\n        }\n        result.children = []\n        result._children = []\n        let children = data.children\n        if (data._children && data._children.length > 0) children = data._children\n        for (let k in children) {\n            if (!children.hasOwnProperty(k)) continue\n            const v = children[k]\n            result._children.push(this.buildFullData(v, prefix, cutPrefix))\n\n            if (!obj || !obj.hasOwnProperty(v.name)) continue\n            result.children.push(this.buildFullDataWithObj(v, prefix, cutPrefix, obj[v.name]))\n        }\n\n        if (data.required && data.required.length > 0 && !obj) {\n            for (let vv of data.children) {\n                if (data.required.indexOf(vv.name) === -1) continue\n                let child = this.buildFullData(vv, prefix, cutPrefix)\n                child.stats = {\n                    isRequired: true,\n                    isEdit: true,\n                }\n                // 设置默认字段不允许编辑\n                if (['root.apiVersion', 'root.kind'].indexOf(child.key) !== -1) child.stats.isEdit = false\n                result.children.push(child)\n            }\n        }\n\n        // 添加节点状态\n        if (!result.stats) result.stats = {\n            isRequired: false,\n            isEdit: true,\n        }\n        // 重构节点唯一key\n        if (cutPrefix !== '') {\n            result.key = result.key.replace(cutPrefix, prefix)\n        } else {\n            result.key = prefix + '.' + result.key\n        }\n        // 构建Base Element元素标题\n        switch (result.type) {\n            case 'array':\n                result.title = this.createAppendArrayNode(\n                    result.key,\n                    this.createMenuTitle(result.key, result)\n                )\n                if (obj) {\n                    for (const k in obj) {\n                        if (!obj.hasOwnProperty(k)) continue\n                        // 默认构建普通数组节点\n                        const tNode = this.buildFullDataWithObj(\n                            result._children[0],\n                            result.key + '.' + k,\n                            result.key,\n                            obj[k]\n                        )\n                        result.children.push(tNode)\n                    }\n                }\n                break\n            case 'object': // 对象节点，object string/string\n                if (result._children.length > 0) {\n                    result.title = this.createMenuTitle(result.key, result)\n                    break\n                }\n                result.title = this.createAppendObjectNode(result.key, result)\n                if (obj) {\n                    for (const k in obj) {\n                        if (!obj.hasOwnProperty(k)) continue\n                        const key = result.key + '.' + randomString(6)\n                        result.children.push({\n                            key,\n                            name: k,\n                            title: this.createKVInputNode(key, k, obj[k]),\n                            type: SourceType.String,\n                            value: obj[k],\n                            children: [],\n                        })\n                    }\n                }\n                break\n            case 'boolean':\n                result.value = obj ? obj.toString() : result.value\n                const options: ND[] = [\n                    {name: 'false', desc: 'false'},\n                    {name: 'true', desc: 'true'},\n                ]\n                if (result.value === '') result.value = options[0].name\n                result.title = this.createPrefixNode(\n                    this.createMenuTitle(result.key, result),\n                    this.createSelectNode(result.key, options, result.value)\n                )\n                break\n            default:\n                result.value = obj ? obj.toString() : result.value\n                // 构建Select Element元素标题\n                if (result.enums && result.enums.length > 0) {\n                    let options: ND[] = []\n                    for (const v of result.enums) {\n                        options.push({\n                            name: v,\n                            desc: v,\n                        })\n                    }\n                    if (result.value === '' && options.length > 0) result.value = options[0].name\n                    result.title = this.createPrefixNode(\n                        this.createMenuTitle(result.key, result),\n                        this.createSelectNode(result.key, options, result.value)\n                    )\n                } else {\n                    result.title = this.createPrefixNode(\n                        this.createMenuTitle(result.key, result),\n                        this.createInputNode(result.key, result.value)\n                    )\n                }\n                break\n        }\n        return result\n    }\n\n    /**\n     * 生成Yaml字符串\n     */\n    convertToYaml = () => {\n        if (this.props.buildYamlData) {\n            let data: any[] = []\n            for (const v of this.state.data) {\n                const item = this.parseTreeToObj([v])\n                data.push(item)\n            }\n            const yamlData = objToYaml(data)\n            this.props.buildYamlData(yamlData)\n        }\n    }\n\n    /**\n     * 解析操作 展示提示框\n     * @param fn\n     */\n    showParseConfirm = (fn: any) => {\n        confirm({\n            title: 'Do you Want to parse these items?',\n            icon: <ExclamationCircleOutlined/>,\n            content: 'Note: it will cover the original target.',\n            onOk() {\n                fn()\n            },\n            onCancel() {\n                // console.log('Cancel');\n            },\n        });\n    }\n\n    /**\n     * yaml生成树结构\n     * @param code\n     */\n    convertToTreeData = (code: string) => {\n        let obj: any\n        try {\n            obj = yamlToObjMulti(code)\n        } catch (e) {\n            message.error('Yaml格式错误')\n            return\n        }\n        const that = this\n        this.showParseConfirm(() => {\n            for (const k in obj) {\n                if (!obj.hasOwnProperty(k)) continue\n                const v = obj[k]\n                const apiVersion = v.apiVersion\n                const kind = v.kind\n                const versionData = apiVersion.split('/')\n                if (versionData.length === 1) versionData.unshift('core')\n                const params: InfoParamsType = {\n                    kind,\n                    group: versionData[0],\n                    version: versionData[1],\n                }\n                that.setState({data: []})\n                tree(params).then(function (result: any) {\n                    if (!result) return\n                    const fullData = that.buildFullDataWithObj(result, '', '', v)\n                    const data = [...that.state.data, fullData]\n                    that.setState({data, expandedKeys: that.getExpandedKeys(data)})\n                }).catch(function (reason) {\n                    console.log(reason)\n                })\n            }\n        })\n    }\n\n    /**\n     * 获取kind对应的渲染数据，并向数据集中增加一组\n     * @param group\n     * @param kind\n     * @param version\n     */\n    generateResource = (group: string, kind: string, version: string) => {\n        const that = this\n        const params: InfoParamsType = {group, kind, version}\n        tree(params).then(function (result: any) {\n            if (!result) return\n            const fullData = that.buildFullData(result)\n            const data = [...that.state.data, fullData]\n            that.setState({data, expandedKeys: that.getExpandedKeys(data)})\n        })\n    }\n\n    /**\n     * 根据资源结构和资源内容渲染数据，并向数据集中增加一组\n     * @param current\n     * @param yamlStr\n     */\n    generateWithObjAndData = (current: any, yamlStr: string) => {\n        const obj = yamlToObj(yamlStr)\n        const fullData = this.buildFullDataWithObj(current, '', '', obj)\n        const data = [...this.state.data, fullData]\n        this.setState({data, expandedKeys: this.getExpandedKeys(data)})\n    }\n\n    /**\n     * tree转obj\n     * @param nodes\n     * @return any\n     */\n    parseTreeToObj = (nodes: any[]): any => {\n        let obj: any = {}\n        for (const v of nodes) {\n            switch (v.type) {\n                case SourceType.Object:\n                    obj[v.name] = this.parseTreeToObj(v.children)\n                    if (v.name === 'root') obj = obj[v.name]\n                    break\n                case SourceType.Array:\n                    let arr = []\n                    for (const va of v.children) {\n                        if (va.type === SourceType.Object) {\n                            if (va.children.length > 0) arr.push(this.parseTreeToObj(va.children))\n                        } else {\n                            if (va.value !== '') arr.push(convertValueByType(va.value, va.type))\n                        }\n                    }\n                    obj[v.name] = arr\n                    break\n                default:\n                    if (v.name !== '') obj[v.name] = convertValueByType(v.value, v.type)\n                    break\n            }\n        }\n        return obj\n    }\n\n    /**\n     * 添加select节点\n     * @param selectData\n     * @param path\n     * @param value\n     * @return React.ReactNode\n     */\n    createSelectNode = (path: string, selectData: ND[], value: string = '') => {\n        let optionData = []\n        for (const v of selectData) {\n            optionData.push({\n                label: v.name,\n                value: JSON.stringify({value: v.name, path})\n            })\n        }\n        const defaultValue = JSON.stringify({\n            value: value === '' ? selectData[0].name : value,\n            path\n        })\n        return <Select\n            defaultValue={defaultValue}\n            className=\"selectStyle\"\n            onChange={this.changeSelectValue}\n            key={path + randomString(3)}\n            options={optionData}\n        />\n    }\n\n    /**\n     * 添加input文本节点\n     * @param path\n     * @param value\n     * @return React.ReactNode\n     */\n    createInputNode = (path: string, value: string = '') => {\n        return <TextArea\n            style={{height: '35px', minHeight: '35px'}}\n            data-path={path}\n            onChange={this.changeInputValue}\n            defaultValue={value}\n        />\n    }\n\n    /**\n     * 添加K/V input文本节点\n     * @param path\n     * @param name\n     * @param value\n     * @return React.ReactNode\n     */\n    createKVInputNode = (path: string, name: string = '', value: string = '') => {\n        return this.createPrefixNode(<Input\n            data-path={path}\n            style={{width: '150px', height: '80%'}}\n            onChange={e => this.changeInputValue(e, false)}\n            defaultValue={name}\n        />, this.createDeleteNode(path, this.createInputNode(path, value)))\n    }\n\n    /**\n     * 添加数组input文本节点\n     * @param path\n     */\n    createArrInputNode = (path: string) => this.createPrefixNode(ArrayNode, this.createDeleteNode(path, this.createInputNode(path)))\n\n    /**\n     * 创建移除节点按钮\n     * @param path\n     * @param node\n     */\n    createDeleteNode = (path: string, node: React.ReactNode) => {\n        return (<>\n            <span className=\"floatLeft\">{node}</span>\n            <span className=\"floatLeft\">\n                <Button\n                    data-path={path}\n                    type='link'\n                    icon={<MinusCircleOutlined/>}\n                    danger\n                    onClick={this.removeObjItem}\n                />\n            </span>\n        </>)\n    }\n\n    /**\n     * 添加数组按钮节点\n     * @param path\n     * @param node\n     * @return React.ReactNode\n     */\n    createAppendArrayNode = (path: string, node: React.ReactNode) => {\n        return (\n            <div className=\"flex\">\n                <span className=\"f1\">{node}</span>\n                <Button\n                    className=\"f1\"\n                    data-path={path}\n                    type=\"link\"\n                    icon={<PlusCircleOutlined/>}\n                    style={{marginTop: '-4px'}}\n                    onClick={this.addArrItem}\n                />\n            </div>\n        )\n    }\n\n    /**\n     * 添加对象按钮节点\n     * @param path\n     * @param source\n     * @return React.ReactNode\n     */\n    createAppendObjectNode = (path: string, source: any) => {\n        return (\n            <div className=\"flex\">\n                <span className=\"f1\">{this.createMenuTitle(path, source)}</span>\n                <Button\n                    className=\"f1\"\n                    data-path={path}\n                    type=\"link\"\n                    icon={<PlusSquareOutlined/>}\n                    style={{marginTop: '-4px'}}\n                    onClick={this.addObjItem}\n                />\n            </div>\n        )\n    }\n\n    /**\n     * 创建节点前缀\n     * @param name\n     * @param node\n     * @return React.ReactNode\n     */\n    createPrefixNode = (name: React.ReactNode, node: React.ReactNode) => {\n        return (\n            <span className=\"ant-input-wrapper ant-input-group\">\n                <span className=\"ant-input-group-addon\"> {name} </span>\n                <span> {node} </span>\n            </span>\n        )\n    }\n\n    /**\n     * 构建标题\n     * @param title\n     * @param tipContent\n     * @param key\n     * @return React.ReactNode\n     */\n    createTitle = (title: React.ReactNode, tipContent: string, key: number = 0) => {\n        if (tipContent === '') return title\n        return <Popover\n            content={tipContent}\n            trigger=\"hover\"\n            arrowPointAtCenter\n            key={key}\n        > {title} </Popover>\n    }\n\n    // 构建移除菜单\n    createDeleteMenu = (path: string, isArray: boolean = false) => {\n        return <Button\n            key=\"del\"\n            data-path={path}\n            className=\"ml2\"\n            type=\"primary\"\n            onClick={isArray ? this.removeObjItem : this.removeItem}\n\n            style={{margin: '5px'}}\n            danger\n        > delete </Button>\n    }\n\n    /**\n     * 构建子项菜单\n     * @param path 节点唯一路径标识\n     * @param source 该节点数据集\n     * @param childs 该节点当前渲染的子节点集合\n     * @return React.ReactNode\n     */\n    createMenuTitle = (path: string, source: any, childs: string[] = []) => {\n        // 获取未渲染的子项\n        let desc = ''\n        if (source.descs && source.descs.length > 0) desc = source.descs[0].desc\n        let notExistChildren = []\n        if (!childs || childs.length === 0)\n            for (const item of source.children) childs.push(item.name)\n        for (const item of source._children) if (childs.indexOf(item.name) === -1) notExistChildren.push(item)\n        // 如果子项都渲染过并且为required节点， 则直接返回\n        if (notExistChildren.length === 0 && source.stats.isRequired) return this.createTitle(source.name, desc)\n        // 渲染不存在子项选择\n        let set = notExistChildren.map((child, index) => {\n            // TODO 支持根据zh/en自动识别渲染\n            let desc = ''\n            if (child.descs && child.descs.length > 0) desc = child.descs[0].desc\n            return this.createTitle(<Button\n                data-path={path}\n                data-name={child.name}\n                className=\"ml2\"\n                type=\"primary\"\n                key={index}\n                onClick={this.addItemFromMenu}\n                style={{margin: '5px'}}\n            > {child.name} </Button>, desc, index)\n        })\n        // 不是required节点或者数组节点，构建基础菜单\n        if (!source.stats.isRequired) set.unshift(this.createDeleteMenu(path, source.type === SourceType.Array))\n        if (source.type === SourceType.Array) set = [this.createDeleteMenu(path, source.type === SourceType.Array)]\n        return this.createTitle(<Popover\n            trigger=\"click\"\n            content={<div style={{maxWidth: '500px'}}>{set}</div>}\n            arrowPointAtCenter\n        > {source.name} </Popover>, desc)\n    }\n\n    /**\n     * 同步菜单项\n     * @param path\n     * @param addSet  需要添加的子项菜单名\n     * @param delSet  需要移除的子项菜单名\n     */\n    syncItemMenu = (path: string, addSet: string[] = [], delSet: string[] = []) => {\n        // 获取选中节点\n        const node = getTreeNodeByPath(path, this.state.data)\n        if (!node) return\n        let expandedKeys = this.state.expandedKeys\n\n        // 添加或移除子项\n        const children = [...node.children]\n        for (const s of node._children) {\n            if (delSet.indexOf(s.name) > -1) {\n                let delStatus = true\n                for (const c of children) {\n                    if (c.name === s.name) {\n                        delStatus = false\n                        break\n                    }\n                }\n                if (delStatus) {\n                    children.push(s)\n                    if (expandedKeys.indexOf(s.key) === -1) expandedKeys.push(s.key)\n                }\n            }\n            if (addSet.indexOf(s.name) > -1) {\n                let addIndex = -1\n                for (const ck in children) {\n                    if (children[ck].name === s.name) {\n                        addIndex = parseInt(ck)\n                        break\n                    }\n                }\n                children.splice(addIndex, 1)\n            }\n        }\n        let cs = []\n        for (const v of children) cs.push(v.name)\n        node.title = this.createMenuTitle(path, node, cs)\n        node.children = children\n        if (expandedKeys.indexOf(node.key) === -1) expandedKeys.push(node.key)\n        // 更新选中节点\n        const data = updateTreeNodeByPath(path, this.state.data, node)\n        this.setState({data, expandedKeys})\n    }\n\n    addItemFromMenu = (e: any) => {\n        const path = e.currentTarget.getAttribute('data-path')\n        const name = e.currentTarget.getAttribute('data-name')\n        this.syncItemMenu(path, [], [name])\n    }\n\n    /**\n     * 添加arr节点子项\n     * @param e\n     */\n    addArrItem = (e: any) => {\n        const path = e.currentTarget.getAttribute('data-path')\n        // 根据path获取到tree的数组节点\n        const node = getTreeNodeByPath(path, this.state.data)\n        if (!node || node._children.length === 0) return\n        // 获取实际渲染数组节点数量\n        const nodeChildNum = node.children.length\n        // 默认构建普通数组节点\n        const keyPath = path + '.' + nodeChildNum\n        // 数组节点添加需要重新构造添加后的所有子项key\n        const tNode = this.buildFullData(node._children[0], keyPath, path)\n        let expandedKeys = this.state.expandedKeys\n        if (tNode.type === 'object') {\n            if (expandedKeys.indexOf(node.key) === -1) expandedKeys.push(node.key)\n            if (expandedKeys.indexOf(tNode.key) === -1) expandedKeys.push(tNode.key)\n        }\n        node.children.push(tNode)\n        // 根据path更新tree\n        const data = updateTreeNodeByPath(path, this.state.data, node)\n        this.setState({data, expandedKeys})\n    }\n\n    /**\n     * 添加obj节点子项\n     * @param e\n     */\n    addObjItem = (e: any) => {\n        const path = e.currentTarget.getAttribute('data-path')\n        // 根据path获取tree节点信息\n        const node = getTreeNodeByPath(path, this.state.data)\n        if (!node) return\n        const key = path + '.' + randomString(6)\n        const tNode = {\n            key,\n            name: '',\n            title: this.createKVInputNode(key),\n            type: SourceType.String,\n            value: '',\n            children: [],\n        }\n        let expandedKeys = this.state.expandedKeys\n        if (expandedKeys.indexOf(path) === -1) expandedKeys.push(path)\n        node.children.push(tNode)\n        const data = updateTreeNodeByPath(path, this.state.data, node)\n        this.setState({data, expandedKeys})\n    }\n\n    /**\n     * 移除节点数组/KV子项\n     * @param e\n     */\n    removeObjItem = (e: any) => {\n        const path = e.currentTarget.getAttribute('data-path')\n        const node = getTreeNodeByPath(path, this.state.data)\n        if (!node) return\n        let data = updateTreeNodeByPath(path, this.state.data, null)\n        this.setState({data})\n    }\n\n    /**\n     * 移除节点子项\n     * @param e\n     */\n    removeItem = (e: any) => {\n        const path = e.currentTarget.getAttribute('data-path')\n        const node = getTreeNodeByPath(path, this.state.data)\n        if (!node) return\n        let data = updateTreeNodeByPath(path, this.state.data, null)\n        this.setState({data})\n        // 存在父节点，更新menu\n        const pathArr = path.split('.')\n        const pathLen = pathArr.length\n        if (pathLen === 1) return\n        const parentPath = pathArr.slice(0, pathLen - 1).join('.')\n        this.syncItemMenu(parentPath, [node.name])\n    }\n\n    /**\n     * 修改select内容\n     * @param val\n     */\n    changeSelectValue = (val: string) => {\n        const valObj = JSON.parse(val)\n        const node = getTreeNodeByPath(valObj.path, this.state.data)\n        if (!node) return\n        node.value = valObj.value\n        const data = updateTreeNodeByPath(valObj.path, this.state.data, node)\n        this.setState({data})\n    }\n\n    /**\n     * 修改input内容\n     * @param e\n     * @param isVal\n     */\n    changeInputValue = (e: any, isVal: boolean = true) => {\n        const path = e.currentTarget.getAttribute('data-path')\n        const value = e.currentTarget.value\n        const node = getTreeNodeByPath(path, this.state.data)\n        if (!node) return\n        isVal ? node.value = value : node.name = value\n        const data = updateTreeNodeByPath(path, this.state.data, node)\n        this.setState({data})\n    }\n\n    /**\n     * 选中树节点\n     * @param selectedKeys\n     * @param e {selected: bool, selectedNodes, node, event}\n     */\n    onSelect = (selectedKeys: any, e: any) => {\n        console.log('onSelect: ', selectedKeys)\n    }\n\n    /**\n     * 展开节点\n     * @param expandedKeys\n     * @param e {expanded: bool, node: TNode}\n     */\n    onExpand = (expandedKeys: any, e: any) => {\n        const currentKey = e.node.key\n        let currentExpandedKeys = []\n        for (const key of expandedKeys) {\n            if (key.indexOf(currentKey) !== -1 && key !== currentKey) continue\n            currentExpandedKeys.push(key)\n        }\n        this.setState({expandedKeys: currentExpandedKeys})\n    }\n\n    /**\n     * 根据树数据获取全部节点key\n     * @param nodes\n     */\n    getExpandedKeys = (nodes: TNode[]) => {\n        let expandedKeys: string[] = []\n        for (const node of nodes) expandedKeys.push(node.key, ...this.getExpandedKeys(node.children))\n        return expandedKeys\n    }\n\n    /**\n     * 折叠所有节点\n     */\n    foldAll = () => this.setState({expandedKeys: []})\n\n    /**\n     * 展开所有节点\n     */\n    unfoldAll = () => this.setState({expandedKeys: this.getExpandedKeys(this.state.data)})\n\n    render() {\n        return (\n            <div className={this.props.className}>\n                <KindList\n                    ref={this.state.kindRef}\n                    generateResource={this.generateResource}\n                    generateWithObjAndData={this.generateWithObjAndData}\n                />\n                <Tree\n                    className=\"treeStyle\"\n                    onSelect={this.onSelect}\n                    onExpand={this.onExpand}\n                    showLine={true}\n                    treeData={this.state.data}\n                    expandedKeys={this.state.expandedKeys}\n                />\n            </div>\n        )\n    }\n}\n\nexport default CTree\n","import React from \"react\";\nimport {message, Affix, Button, Popover, Drawer, Upload} from \"antd\";\nimport {\n    PlusSquareOutlined,\n    MinusSquareOutlined,\n    CopyOutlined,\n    DownloadOutlined,\n    DoubleLeftOutlined,\n    DoubleRightOutlined,\n    SettingOutlined\n} from '@ant-design/icons'\nimport './index.css'\nimport {downloadData} from \"../base\";\nimport {generateURL, uploadURL} from \"../api/resource\";\nimport {createURL} from \"../api/template\";\n\nconst uploadProps = {\n    name: 'file',\n    action: uploadURL,\n    showUploadList: false,\n    maxCount: 1,\n    onChange(info: any) {\n        if (info.file.status === 'done') {\n            message.success(`${info.file.name} file uploaded successfully`)\n        } else if (info.file.status === 'error') {\n            message.error(`${info.file.name} file upload failed.`)\n        }\n    },\n};\n\nconst generateProps = {\n    name: 'file',\n    action: generateURL,\n    showUploadList: false,\n    maxCount: 1,\n    onChange(info: any) {\n        if (info.file.status === 'error') {\n            message.error(`${info.file.name} file parse failed: `, info.file.response)\n            return\n        }\n        if (info.file.status === 'done') {\n            const data = info.file.response\n            downloadData(data)\n            message.success(`Custom Resource Definition is downloaded.`)\n            return\n        }\n    },\n}\n\nconst templateProps = {\n    name: 'file',\n    action: createURL,\n    showUploadList: false,\n    maxCount: 1,\n    onChange(info: any) {\n        if (info.file.status === 'error') {\n            message.error(`${info.file.name} file upload failed: `, info.file.response)\n            return\n        }\n        if (info.file.status === 'done') {\n            message.success(`${info.file.name} file uploaded successfully`)\n            return\n        }\n    },\n}\n\nclass NavBar extends React.Component<any, any> {\n\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            top: 0,\n            configVisible: false,\n        }\n    }\n\n    /**\n     * 折叠\n     */\n    fold = () => {\n        if (this.props.fold) this.props.fold()\n    }\n\n    /**\n     * 展开\n     */\n    unfold = () => {\n        if (this.props.unfold) this.props.unfold()\n    }\n\n    /**\n     * 构建树结构\n     */\n    build = () => {\n        if (this.props.buildData) this.props.buildData()\n    }\n\n    /**\n     * 解析为yaml\n     */\n    parse = () => {\n        if (this.props.parseData) this.props.parseData()\n    }\n\n    /**\n     * 复制\n     */\n    copyData = () => {\n        let text = document.createElement(\"textarea\");    // 直接构建textarea\n        text.value = this.props.data                               // 设置内容\n        document.body.appendChild(text);                           // 添加临时实例\n        text.select();                                             // 选择实例内容\n        document.execCommand(\"Copy\");                  // 执行复制\n        document.body.removeChild(text);                           // 删除临时实例\n    }\n\n    /**\n     * 下载\n     */\n    downloadData = () => {\n        if (!this.props.data) {\n            message.error('无内容可下载')\n            return\n        }\n        downloadData(this.props.data)\n    }\n\n    /**\n     * 打开配置\n     */\n    configOpen = () => this.setState({configVisible: true})\n\n    /**\n     * 关闭配置\n     */\n    configClose = () => this.setState({configVisible: false})\n\n    render() {\n        return (<>\n            <Affix offsetTop={this.state.top}>\n                <div className=\"navBar\">\n                    <Popover trigger=\"hover\" content=\"设置\">\n                        <Button className=\"ml2\" type=\"primary\" onClick={this.configOpen}>\n                            <SettingOutlined/>\n                        </Button>\n                    </Popover>\n                    <Popover trigger=\"hover\" content=\"折叠全部\">\n                        <Button className=\"ml2\" type=\"primary\" onClick={this.fold}>\n                            <PlusSquareOutlined/>\n                        </Button>\n                    </Popover>\n                    <Popover trigger=\"hover\" content=\"展开全部\">\n                        <Button className=\"ml2\" type=\"primary\" onClick={this.unfold}>\n                            <MinusSquareOutlined/>\n                        </Button>\n                    </Popover>\n                    <Popover trigger=\"hover\" content=\"解析\">\n                        <Button className=\"ml2\" type=\"primary\" onClick={this.parse}>\n                            <DoubleLeftOutlined/>\n                        </Button>\n                    </Popover>\n                    <Popover trigger=\"hover\" content=\"构建\">\n                        <Button className=\"ml2\" type=\"primary\" onClick={this.build}>\n                            <DoubleRightOutlined/>\n                        </Button>\n                    </Popover>\n                    <Popover trigger=\"hover\" content=\"复制\">\n                        <Button className=\"ml2\" type=\"primary\" onClick={this.copyData}>\n                            <CopyOutlined/>\n                        </Button>\n                    </Popover>\n                    <Popover trigger=\"hover\" content=\"下载\">\n                        <Button className=\"ml2\" type=\"primary\" onClick={this.downloadData}>\n                            <DownloadOutlined/>\n                        </Button>\n                    </Popover>\n                </div>\n            </Affix>\n            <Drawer\n                title=\"高级设置\"\n                placement=\"left\"\n                closable={false}\n                visible={this.state.configVisible}\n                onClose={this.configClose}\n            >\n                <p>更多内容，敬请期待</p>\n                <Upload {...generateProps}>\n                    <Button type=\"ghost\" block>\n                        资源定义生成\n                    </Button>\n                </Upload>\n                <Upload {...uploadProps}>\n                    <Button type=\"primary\" block>\n                        资源上传解析\n                    </Button>\n                </Upload>\n                <Upload {...templateProps}>\n                    <Button type=\"primary\" block>\n                        模板添加\n                    </Button>\n                </Upload>\n            </Drawer>\n        </>);\n    }\n}\n\nexport default NavBar\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport CTree from \"./components/CTree\";\nimport {UnControlled as CodeMirror} from \"react-codemirror2\";\nimport NavBar from \"./components/NavBar\";\n\nrequire('codemirror/mode/yaml/yaml')\n\nexport default class App extends React.Component<any, any> {\n\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            navBarRef: React.createRef(),\n            cTreeRef: React.createRef(),\n            defaultData: '',\n            codeData: '',\n        }\n    }\n\n    /**\n     * 构建code内容\n     * @param data\n     */\n    buildCodeData = (data: string) => this.setState({defaultData: data})\n\n    render() {\n        return (\n            <div className=\"App\">\n                <NavBar\n                    ref={this.state.navBarRef}\n                    data={this.state.codeData}\n                    fold={() => this.state.cTreeRef.current.foldAll()}\n                    unfold={() => this.state.cTreeRef.current.unfoldAll()}\n                    buildData={() => this.state.cTreeRef.current.convertToYaml()}\n                    parseData={() => {this.state.cTreeRef.current.convertToTreeData(this.state.codeData)}}\n                />\n                <div className=\"flex\">\n                    <CTree\n                        className=\"trees\"\n                        ref={this.state.cTreeRef}\n                        buildYamlData={this.buildCodeData}\n                    />\n                    <CodeMirror\n                        className=\"codes\"\n                        value={this.state.defaultData}\n                        options={{\n                            mode: 'yaml',\n                            theme: 'material',\n                            lineNumbers: true\n                        }}\n                        editorDidMount={(editor) => {\n                            editor.setSize('auto', 500)\n                        }}\n                        onChange={(editor, data, value) => {\n                            this.setState({codeData: value})\n                        }}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}