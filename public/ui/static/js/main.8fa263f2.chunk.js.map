{"version":3,"sources":["serviceWorker.ts","utils/request.ts","api/resource.ts","base/base.ts","components/KindList.tsx","base/index.ts","components/CTree.tsx","components/NavBar.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","codeMessage","200","201","202","204","400","401","403","404","406","410","422","500","502","503","504","requestWithExtend","extend","errorHandler","error","response","data","status","errorText","statusText","notification","message","description","headers","host","protocol","request","url","a","option","getResponse","prefix","result","params","SourceType","KindList","props","generateResource","value","length","getOptions","that","list","then","setState","options","state","className","this","onChange","changeOnSelect","React","Component","randomString","chars","i","Math","floor","random","sortObj","obj","newObj","Object","keys","sort","map","key","getNodeByPathWithTree","path","nodes","paths","split","node","v","parseFloat","item","name","items","getTreeNodeByPath","children","updateTreeNodeByPath","newNodes","newNode","push","CTree","buildFullData","cutPrefix","k","hasOwnProperty","_children","required","vv","indexOf","child","stats","isRequired","isEdit","replace","type","title","createAppendArrayNode","createMenuTitle","createAppendObjectNode","desc","createPrefixNode","createSelectNode","enums","createInputNode","convertToYaml","buildYamlData","parseTreeToObj","yamlData","str","jsyaml","safeDump","objToYaml","group","kind","version","tree","console","log","fullData","expandedKeys","getExpandedKeys","parseObjToTreeData","resource","kindRef","current","getResource","root","parseObjToTree","prefixKey","skipNode","val","keyPath","fullKey","tNode","createKVInputNode","String","Array","selects","arr","va","createTextNode","source","data-path","changeInputValue","defaultValue","selectData","optionData","label","JSON","stringify","changeSelectValue","style","width","height","e","createDeleteNode","createArrInputNode","icon","MinusCircleOutlined","danger","onClick","removeObjItem","PlusCircleOutlined","marginTop","addArrItem","PlusSquareOutlined","addObjItem","createTitle","tipContent","content","trigger","arrowPointAtCenter","createDeleteMenu","isArray","removeItem","margin","childs","descs","notExistChildren","set","index","data-name","addItemFromMenu","unshift","maxWidth","syncItemMenu","addSet","delSet","s","delStatus","c","addIndex","ck","parseInt","splice","cs","target","getAttribute","currentTarget","nodeChildNum","pathArr","pathLen","parentPath","slice","join","valObj","parse","isVal","onSelect","selectedKeys","onExpand","currentKey","currentExpandedKeys","foldAll","unfoldAll","createRef","ref","showLine","treeData","NavBar","fold","unfold","build","buildData","parseData","copyData","text","document","createElement","body","appendChild","select","execCommand","removeChild","downloadData","element","setAttribute","encodeURIComponent","filename","display","click","configOpen","configVisible","configClose","top","offsetTop","MinusSquareOutlined","DoubleLeftOutlined","DoubleRightOutlined","CopyOutlined","DownloadOutlined","SettingOutlined","placement","closable","visible","onClose","require","App","buildCodeData","defaultData","navBarRef","cTreeRef","codeData","alert","mode","theme","lineNumbers","editorDidMount","editor","setSize","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"2RAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,iKCXAC,EAA0C,CAC5CC,IAAK,iFACLC,IAAK,+DACLC,IAAK,qHACLC,IAAK,6CACLC,IAAK,qKACLC,IAAK,2HACLC,IAAK,yGACLC,IAAK,+JACLC,IAAK,yDACLC,IAAK,qHACLC,IAAK,+GACLC,IAAK,6FACLC,IAAK,iCACLC,IAAK,yGACLC,IAAK,kCA2BHC,EAAoBC,YAAO,CAC7BC,aAtBiB,SAACC,GAAwD,IACnEC,EAAkBD,EAAlBC,SAAUC,EAAQF,EAARE,KACjB,GAAID,GAAYA,EAASE,OAAQ,CAC7B,IAAMC,EAAYF,IAAerB,EAAYoB,EAASE,SAAWF,EAASI,YAE1EC,IAAaN,MAAM,CACfO,QAAQ,2BACRC,YAAaJ,SAETH,GACRK,IAAaN,MAAM,CACfO,QAAS,2BACTC,YAAa,qGAGrB,OAAOP,GASPQ,QAAS,CAGL,eAAgB,sBAIlBC,EAAOjC,OAAOC,SAASiC,SAAW,KAAOlC,OAAOC,SAASgC,KAchDE,EATF,uCAAG,WAAOC,GAAP,6BAAAC,EAAA,6DAAoBC,EAApB,+BAAkC,GAAlC,SACOlB,EAAkBa,EAAOG,EAAR,YAAC,aACjCG,aAAa,GACVD,GAF6B,IAGhCE,OAAQ,MAJA,cACRC,EADQ,yBAMLA,EAAOhB,MANF,2CAAH,sD,4CCxDN,sBAAAY,EAAA,+EACIF,EAAQ,mBADZ,4C,kEAQA,WAAoBO,GAApB,SAAAL,EAAA,+EACIF,EAAQ,iBAAkB,CAACO,YAD/B,4C,0BCZKC,ECqCGC,E,kDAnCX,WAAYC,GAAa,IAAD,8BACpB,cAAMA,IAWVC,iBAAmB,SAACC,GACK,IAAjBA,EAAMC,QACN,EAAKH,MAAMC,kBACX,EAAKD,MAAMC,iBAAiBC,EAAM,GAAIA,EAAM,GAAIA,EAAM,KAftC,EAkBxBE,WAAa,WACT,IAAMC,EAAI,gBFjBX,WAAP,gCEkBQC,GAAOC,MAAK,SAAUX,GAClBS,EAAKG,SAAS,CAACC,QAASb,QAnB5B,EAAKc,MAAQ,CACTD,QAAS,IAEb,EAAKL,aALe,E,0CAyBxB,WAAU,IAAD,OACL,OAAO,kBAAC,IAAD,CACHO,UAAU,OACVF,QAASG,KAAKF,MAAMD,QACpBI,SAAU,SAAAX,GAAK,OAAI,EAAKD,iBAAiBC,IACzCY,gBAAc,Q,GAhCHC,IAAMC,Y,SDAjBlB,K,gBAAAA,E,gBAAAA,E,kBAAAA,E,gBAAAA,E,eAAAA,M,2BEiKL,SAASmB,EAAad,GAGzB,IAFA,IAAMe,EAAgB,iEAClBtB,EAAS,GACJuB,EAAIhB,EAAQgB,EAAI,IAAKA,EAAGvB,GAAUsB,EAAME,KAAKC,MAAMD,KAAKE,SAAWJ,EAAMf,SAClF,OAAOP,EAOX,SAAS2B,EAAQC,GACb,IAAIC,EAAc,GAElB,OADAC,OAAOC,KAAKH,GAAKI,OAAOC,KAAI,SAACC,GAAD,OAAcL,EAAOK,GAAON,EAAIM,MACrDL,EAgCJ,SAASM,EAAsBC,EAAcC,GAChD,IADwF,EAClFC,EAAQF,EAAKG,MAAM,KACrBC,EAA0B,KAF0D,cAGxEF,GAHwE,IAGxF,2BAAuB,CAAC,IAAbG,EAAY,QAInB,GAHAD,EAAO,KAEOE,WAAWD,IACZ,EACTD,EAAOH,EAAM,OACV,CAAC,IAAD,gBACgBA,GADhB,IACH,2BAA0B,CAAC,IAAhBM,EAAe,QACtB,GAAIA,EAAKC,OAASH,EAAG,CACjBD,EAAOG,EACP,QAJL,+BAQP,IAAKH,EAAM,MACXH,EAAQG,EAAKK,OAlBuE,8BAoBxF,OAAOL,EASJ,SAASM,EAAkBZ,EAAaG,GAC3C,IAAIG,EAD0D,gBAE3CH,GAF2C,IAE9D,2BAA0B,CAAC,IAAhBM,EAAe,QACtB,GAAIA,EAAKT,MAAQA,EAAK,OAAOS,EAE7B,GADAH,EAAOM,EAAkBZ,EAAKS,EAAKI,UACzB,OAAOP,GALyC,8BAO9D,OAAOA,EAUJ,SAASQ,EAAqBd,EAAaG,EAAgB/B,GAC9D,IAD4F,EACxF2C,EAAoB,GADoE,cAEzEZ,GAFyE,IAE5F,2BAA0B,CAAC,IAAhBG,EAAe,QAClBU,EAAO,eAAOV,GACdU,EAAQhB,MAAQA,GAIpBgB,EAAQH,SAAWC,EAAqBd,EAAKgB,EAAQH,SAAUzC,GAC/D2C,EAASE,KAAKD,IAJN5C,GAAO2C,EAASE,KAAK7C,IAL2D,8BAW5F,OAAO2C,E,sBCyeIG,E,kDApuBX,WAAYhD,GAAa,IAAD,8BACpB,cAAMA,IAcViD,cAAgB,SAACrE,GAAiE,IAAtDe,EAAqD,uDAApC,GAAIuD,EAAgC,uDAAZ,GAClD,KAAXvD,IAAeA,EAASsB,EAAa,IACzC,IAAIrB,EAAc,GAClB,IAAK,IAAIuD,KAAKvE,EACLA,EAAKwE,eAAeD,KACzBvD,EAAOuD,GAAKvE,EAAKuE,IAErBvD,EAAO+C,SAAW,GAClB/C,EAAOyD,UAAY,GACnB,IAAIV,EAAW/D,EAAK+D,SAEpB,IAAK,IAAIQ,KADLvE,EAAKyE,WAAazE,EAAKyE,UAAUlD,OAAS,IAAGwC,EAAW/D,EAAKyE,WACnDV,EACLA,EAASS,eAAeD,IAC7BvD,EAAOyD,UAAUN,KAAK,EAAKE,cAAcN,EAASQ,GAAIxD,EAAQuD,IAElE,GAAItE,EAAK0E,UAAY1E,EAAK0E,SAASnD,OAAS,EAAG,CAAC,IAAD,gBAC5BvB,EAAK+D,UADuB,IAC3C,2BAA8B,CAAC,IAAtBY,EAAqB,QAC1B,IAAwC,IAApC3E,EAAK0E,SAASE,QAAQD,EAAGf,MAA7B,CACA,IAAIiB,EAAQ,EAAKR,cAAcM,EAAI5D,EAAQuD,GAC3CO,EAAMC,MAAQ,CACVC,YAAY,EACZC,QAAQ,IAGiD,IAAzD,CAAC,kBAAmB,aAAaJ,QAAQC,EAAM3B,OAAa2B,EAAMC,MAAME,QAAS,GACrFhE,EAAO+C,SAASI,KAAKU,KAVkB,+BA0B/C,OAXK7D,EAAO8D,QAAO9D,EAAO8D,MAAQ,CAC9BC,YAAY,EACZC,QAAQ,IAIRhE,EAAOkC,IADO,KAAdoB,EACatD,EAAOkC,IAAI+B,QAAQX,EAAWvD,GAE9BA,EAAS,IAAMC,EAAOkC,IAG/BlC,EAAOkE,MACX,IAAK,QACDlE,EAAOmE,MAAQ,EAAKC,sBAChBpE,EAAOkC,IACP,EAAKmC,gBAAgBrE,EAAOkC,IAAKlC,IAErC,MACJ,IAAK,SAC+B,IAA5BA,EAAOyD,UAAUlD,OACjBP,EAAOmE,MAAQ,EAAKG,uBAAuBtE,EAAOkC,IAAKlC,GAEvDA,EAAOmE,MAAQ,EAAKE,gBAAgBrE,EAAOkC,IAAKlC,GAEpD,MACJ,IAAK,UACD,IAAMa,EAAgB,CAClB,CAAC+B,KAAM,OAAQ2B,KAAM,QACrB,CAAC3B,KAAM,QAAS2B,KAAM,UAE1BvE,EAAOmE,MAAQ,EAAKK,iBAChB,EAAKH,gBAAgBrE,EAAOkC,IAAKlC,GACjC,EAAKyE,iBAAiBzE,EAAOkC,IAAKrB,EAASb,EAAOM,QAEtD,MACJ,QAEI,GAAIN,EAAO0E,OAAS1E,EAAO0E,MAAMnE,OAAS,EAAG,CACzC,IADyC,EACrCM,EAAgB,GADqB,cAEzBb,EAAO0E,OAFkB,IAEzC,2BAA8B,CAAC,IAApBjC,EAAmB,QAC1B5B,EAAQsC,KAAK,CACTP,KAAMH,EACN8B,KAAM9B,KAL2B,8BAQzCzC,EAAOmE,MAAQ,EAAKK,iBAChB,EAAKH,gBAAgBrE,EAAOkC,IAAKlC,GACjC,EAAKyE,iBAAiBzE,EAAOkC,IAAKrB,EAASb,EAAOM,aAGtDN,EAAOmE,MAAQ,EAAKK,iBAChB,EAAKH,gBAAgBrE,EAAOkC,IAAKlC,GACjC,EAAK2E,gBAAgB3E,EAAOkC,IAAKlC,EAAOM,QAKxD,OAAON,GAtGa,EA4GxB4E,cAAgB,WACZ,GAAI,EAAKxE,MAAMyE,cAAe,CAC1B,IAD0B,EACtB7F,EAAc,GADQ,cAEV,EAAK8B,MAAM9B,MAFD,IAE1B,2BAAiC,CAAC,IAAvByD,EAAsB,QACvBE,EAAO,EAAKmC,eAAe,CAACrC,IAClCzD,EAAKmE,KAAKR,IAJY,8BAM1B,IAAMoC,EDgJX,SAAmBnD,GACtB,IAAIoD,EAAM,GAEV,IAAK,IAAM9C,KAAON,EACTA,EAAI4B,eAAetB,KACxB8C,GAAG,QACHA,GAAOC,IAAOC,SAASvD,EAAQC,EAAIM,MAGvC,OADA8C,GAAe,KAARA,EAAa,MAAQ,GCxJHG,CAAUnG,GAC3B,EAAKoB,MAAMyE,cAAcE,KApHT,EA8HxB1E,iBAAmB,SAAC+E,EAAeC,EAAcC,GAC7C,IAAM7E,EAAI,gBJhIX,SAAP,mCIkIQ8E,CAD+B,CAACH,QAAOC,OAAMC,YAChC3E,MAAK,SAAUX,GACxBwF,QAAQC,IAAIzF,GACZ,IAAM0F,EAAWjF,EAAK4C,cAAcrD,GACpCwF,QAAQC,IAAIC,GACZ,IAAM1G,EAAI,sBAAOyB,EAAKK,MAAM9B,MAAlB,CAAwB0G,IAClCjF,EAAKG,SAAS,CAAC5B,OAAM2G,aAAclF,EAAKmF,gBAAgB5G,SAtIxC,EAgJxB6G,mBAAqB,SAACjE,GAClB,IAAI5C,EAAgB,GACpB,IAAK,IAAMkD,KAAON,EACd,GAAKA,EAAI4B,eAAetB,GAAxB,CACA,IAAMmD,EAAenD,EAAIK,MAAM,KAAK,GAC9BuD,EAAyB,EAAKhF,MAAMiF,QAAQC,QAAQC,YAAYZ,EAAM,QACxEa,EAAc,CACdhE,MACAU,KAAMV,EACNiC,MAAOkB,EACPnB,KAAMhE,EAAW4B,OACjBxB,MAAO,GACPyC,SAAU,EAAKoD,eAAevE,EAAIM,GAAM4D,EAAU5D,IAEtDlD,EAAKmE,KAAK+C,GAEd,OAAOlH,GAhKa,EA4KxBmH,eAAiB,SAACvE,EAAUkE,EAAwBM,GAA8E,IAA3DhE,EAA0D,uDAA3C,GAAIiE,EAAuC,wDAMzHrH,EAAgB,GAEpB,IAAK,IAAMkD,KADXE,EAAgB,KAATA,EAAc,GAAKA,EAAO,IACfR,EACd,GAAKA,EAAI4B,eAAetB,GAAxB,CACA,IAAMoE,EAAM1E,EAAIM,GACVqE,EAAUnE,EAAOF,EACjBsE,EAAUJ,EAAY,IAAMG,EAClC,GAAIF,EAAJ,CACI,IAAII,EAAe,CACfvE,IAAKsE,EACL5D,KAAMV,EACNiC,MAAO,EAAKuC,kBAAkBF,EAAStE,EAAKoE,GAC5CpC,KAAMhE,EAAWyG,OACjBrG,MAAOgG,EACPvD,SAAU,IAEd/D,EAAKmE,KAAKsD,OATd,CAYA,IAAMjE,EAAOL,EAAsBoE,EAAST,GAC5C,GAAKtD,EAAL,CACA,IAAIiE,EAAe,CACfvE,IAAKsE,EACL5D,KAAMJ,EAAKI,KACXuB,MAAO3B,EAAKI,KACZsB,KAAM1B,EAAK0B,KACX5D,MAAO,GACPyC,SAAU,IAEd,OAAQP,EAAK0B,MACT,KAAKhE,EAAW4B,OAEc,IAAtBU,EAAKK,MAAMtC,QACXkG,EAAMtC,MAAQ,EAAKG,uBAAuBkC,EAAShE,GACnDiE,EAAM1D,SAAW,EAAKoD,eAAeG,EAAKR,EAAUM,EAAWG,GAAS,KAExEE,EAAMtC,MAAQ,EAAKE,gBAAgBmC,EAAShE,GAC5CiE,EAAM1D,SAAW,EAAKoD,eAAeG,EAAKR,EAAUM,EAAWG,IAEnE,MACJ,KAAKrG,EAAW0G,MACZH,EAAMtC,MAAQ,EAAKC,sBAAsBoC,EAAS,EAAKnC,gBAAgBmC,EAAShE,IAChFiE,EAAM1D,SAAW,EAAKoD,eAAeG,EAAKR,EAAUM,EAAWG,GAC/D,MACJ,KAAKrG,EAAW5C,QACgB,IAAxBkF,EAAKqE,QAAQtG,SAAciC,EAAKqE,QAAU,CAC1C,CAACjE,KAAM,OAAQ2B,KAAM,QACrB,CAAC3B,KAAM,QAAS2B,KAAM,WAE1BkC,EAAMtC,MAAQ,EAAKK,iBACf,EAAKH,gBAAgBmC,EAAShE,GAC9B,EAAKiC,iBAAiB+B,EAAShE,EAAKqE,UAExCJ,EAAMnG,MAAgB,KAARgG,EAAa9D,EAAKqE,QAAQ,GAAGjE,KAAO0D,EAClD,MACJ,QACI,GAAI9D,EAAKqE,QAAQtG,OAAS,EAAG,CACzB,GAAY,KAAR+F,EAAY,CAAC,IAAD,gBACI9D,EAAKqE,SADT,IACZ,2BAA8B,CAAC,IAApBpE,EAAmB,QAC1B,GAAIA,EAAEG,OAAS0D,EAAK,CAChBG,EAAMnG,MAAQgG,EACd,QAJI,+BAQI,KAAhBG,EAAMnG,QAAcmG,EAAMnG,MAAQkC,EAAKqE,QAAQ,GAAGjE,MACtD6D,EAAMtC,MAAQ,EAAKK,iBACf,EAAKH,gBAAgBmC,EAAShE,GAC9B,EAAKiC,iBAAiB+B,EAAShE,EAAKqE,QAASJ,EAAMnG,aAGvDmG,EAAMtC,MAAQ,EAAKK,iBACf,EAAKH,gBAAgBmC,EAAShE,GAC9B,EAAKmC,gBAAgB6B,EAASF,IAElCG,EAAMnG,MAAQgG,EAI1BtH,EAAKmE,KAAKsD,KAEd,OAAOzH,GAnQa,EA2QxB8F,eAAiB,SAACzC,GACd,IADoC,EAChCT,EAAW,GADqB,cAEpBS,GAFoB,IAEpC,2BAAuB,CAAC,IAAbI,EAAY,QACnB,OAAQA,EAAEyB,MACN,KAAKhE,EAAW4B,OACZF,EAAIa,EAAEG,MAAQ,EAAKkC,eAAerC,EAAEM,UACpC,MACJ,KAAK7C,EAAW0G,MACZ,IADJ,EACQE,EAAM,GADd,cAEqBrE,EAAEM,UAFvB,IAEI,2BAA6B,CAAC,IAAnBgE,EAAkB,QACrBA,EAAG7C,OAAShE,EAAW4B,OACnBiF,EAAGhE,SAASxC,OAAS,GAAGuG,EAAI3D,KAAK,EAAK2B,eAAeiC,EAAGhE,WAE3C,KAAbgE,EAAGzG,OAAcwG,EAAI3D,KAAK4D,EAAGzG,QAN7C,8BASIsB,EAAIa,EAAEG,MAAQkE,EACd,MACJ,QACmB,KAAXrE,EAAEG,OAAahB,EAAIa,EAAEG,MAAQH,EAAEnC,SAnBX,8BAuBpC,OAAOsB,GAlSa,EAsSxBoF,eAAiB,SAAC5E,EAAc6E,GAC5B,OAAO,kBAAC,IAAD,CAAUC,YAAW9E,EAAMnB,SAAU,EAAKkG,iBAAkBC,aAAcH,EAAO3G,SAvSpE,EAiTxBmE,iBAAmB,SAACrC,EAAciF,GAA0C,IAAD,EAAvB/G,EAAuB,uDAAP,GAC5DgH,EAAa,GADsD,cAEvDD,GAFuD,IAEvE,2BAA4B,CAAC,IAAlB5E,EAAiB,QACxB6E,EAAWnE,KAAK,CACZoE,MAAO9E,EAAEG,KACTtC,MAAOkH,KAAKC,UAAU,CAACnH,MAAOmC,EAAEG,KAAMR,YALyB,8BAQvE,IAAMgF,EAAeI,KAAKC,UAAU,CAChCnH,MAAiB,KAAVA,EAAe+G,EAAW,GAAGzE,KAAOtC,EAC3C8B,SAEJ,OAAO,kBAAC,IAAD,CACHgF,aAAcA,EACdrG,UAAU,cACVE,SAAU,EAAKyG,kBACfxF,IAAKE,EAAOf,EAAa,GACzBR,QAASyG,KAlUO,EA4UxB3C,gBAAkB,SAACvC,GAAsC,IAAxB9B,EAAuB,uDAAP,GAC7C,OAAO,kBAAC,IAAD,CAAO4G,YAAW9E,EAAMnB,SAAU,EAAKkG,iBAAkBC,aAAc9G,KA7U1D,EAuVxBoG,kBAAoB,SAACtE,GAAyD,IAA3CQ,EAA0C,uDAA3B,GAAItC,EAAuB,uDAAP,GAClE,OAAO,EAAKkE,iBAAiB,kBAAC,IAAD,CACzB0C,YAAW9E,EACXuF,MAAO,CAACC,MAAO,QAASC,OAAQ,OAChC5G,SAAU,SAAA6G,GAAC,OAAI,EAAKX,iBAAiBW,GAAG,IACxCV,aAAcxE,IACd,EAAKmF,iBAAiB3F,EAAM,EAAKuC,gBAAgBvC,EAAM9B,MA7VvC,EAoWxB0H,mBAAqB,SAAC5F,GAAD,OAAkB,EAAKoC,iBHnXvB,IGmXmD,EAAKuD,iBAAiB3F,EAAM,EAAKuC,gBAAgBvC,MApWjG,EA2WxB2F,iBAAmB,SAAC3F,EAAcI,GAC9B,OAAQ,oCACJ,0BAAMzB,UAAU,aAAayB,GAC7B,0BAAMzB,UAAU,aACZ,kBAAC,IAAD,CACImG,YAAW9E,EACX8B,KAAK,OACL+D,KAAM,kBAACC,EAAA,EAAD,MACNC,QAAM,EACNC,QAAS,EAAKC,mBApXN,EAgYxBjE,sBAAwB,SAAChC,EAAcI,GACnC,OACI,yBAAKzB,UAAU,QACX,0BAAMA,UAAU,MAAMyB,GACtB,kBAAC,IAAD,CACIzB,UAAU,KACVmG,YAAW9E,EACX8B,KAAK,OACL+D,KAAM,kBAACK,EAAA,EAAD,MACNX,MAAO,CAACY,UAAW,QACnBH,QAAS,EAAKI,eA1YN,EAsZxBlE,uBAAyB,SAAClC,EAAc6E,GACpC,OACI,yBAAKlG,UAAU,QACX,0BAAMA,UAAU,MAAM,EAAKsD,gBAAgBjC,EAAM6E,IACjD,kBAAC,IAAD,CACIlG,UAAU,KACVmG,YAAW9E,EACX8B,KAAK,OACL+D,KAAM,kBAACQ,EAAA,EAAD,MACNd,MAAO,CAACY,UAAW,QACnBH,QAAS,EAAKM,eAhaN,EA4axBlE,iBAAmB,SAAC5B,EAAuBJ,GACvC,OACI,0BAAMzB,UAAU,qCACZ,0BAAMA,UAAU,yBAAhB,IAA0C6B,EAA1C,KACA,kCAAQJ,EAAR,OAhbY,EA4bxBmG,YAAc,SAACxE,EAAwByE,GAAyC,IAArB1G,EAAoB,uDAAN,EACrE,MAAmB,KAAf0G,EAA0BzE,EACvB,kBAAC,IAAD,CACH0E,QAASD,EACTE,QAAQ,QACRC,oBAAkB,EAClB7G,IAAKA,GAJF,IAKJiC,EALI,MA9ba,EAucxB6E,iBAAmB,SAAC5G,GAA4C,IAA9B6G,EAA6B,wDAC3D,OAAO,kBAAC,IAAD,CACH/G,IAAI,MACJgF,YAAW9E,EACXrB,UAAU,MACVmD,KAAK,UACLkE,QAASa,EAAU,EAAKZ,cAAgB,EAAKa,WAE7CvB,MAAO,CAACwB,OAAQ,OAChBhB,QAAM,GARH,aAxca,EA2dxB9D,gBAAkB,SAACjC,EAAc6E,GAAwC,IAA3BmC,EAA0B,uDAAP,GAEzD7E,EAAO,GACP0C,EAAOoC,OAASpC,EAAOoC,MAAM9I,OAAS,IAAGgE,EAAO0C,EAAOoC,MAAM,GAAG9E,MACpE,IAJoE,EAIhE+E,EAAmB,GAJ6C,cAKjDrC,EAAOlE,UAL0C,IAKpE,gCAAWJ,EAAX,QAAoCyG,EAAOjG,KAAKR,EAAKC,OALe,kDAMjDqE,EAAOxD,WAN0C,IAMpE,gCAAWd,EAAX,SAAwE,IAA/ByG,EAAOxF,QAAQjB,EAAKC,OAAc0G,EAAiBnG,KAAKR,IAN7B,8BAQpE,GAAgC,IAA5B2G,EAAiB/I,QAAgB0G,EAAOnD,MAAMC,WAAY,OAAO,EAAK4E,YAAY1B,EAAOrE,KAAM2B,GAEnG,IAAIgF,EAAMD,EAAiBrH,KAAI,SAAC4B,EAAO2F,GAEnC,IAAIjF,EAAO,GAEX,OADIV,EAAMwF,OAASxF,EAAMwF,MAAM9I,OAAS,IAAGgE,EAAOV,EAAMwF,MAAM,GAAG9E,MAC1D,EAAKoE,YAAY,kBAAC,IAAD,CACpBzB,YAAW9E,EACXqH,YAAW5F,EAAMjB,KACjB7B,UAAU,MACVmD,KAAK,UACLhC,IAAKsH,EACLpB,QAAS,EAAKsB,gBACd/B,MAAO,CAACwB,OAAQ,QAPI,IAQrBtF,EAAMjB,KARe,KAQE2B,EAAMiF,MAKpC,OAFKvC,EAAOnD,MAAMC,YAAYwF,EAAII,QAAQ,EAAKX,iBAAiB5G,EAAsB,UAAhB6E,EAAO/C,OACzD,UAAhB+C,EAAO/C,OAAkBqF,EAAM,CAAC,EAAKP,iBAAiB5G,EAAsB,UAAhB6E,EAAO/C,QAChE,EAAKyE,YAAY,kBAAC,IAAD,CACpBG,QAAQ,QACRD,QAAS,yBAAKlB,MAAO,CAACiC,SAAU,UAAWL,GAC3CR,oBAAkB,GAHE,IAIrB9B,EAAOrE,KAJc,KAII2B,IA1fR,EAmgBxBsF,aAAe,SAACzH,GAAgE,IAAlD0H,EAAiD,uDAA9B,GAAIC,EAA0B,uDAAP,GAE9DvH,EAAOM,EAAkBV,EAAM,EAAKtB,MAAM9B,MAChD,GAAKwD,EAAL,CACA,IAJ2E,EAIvEmD,EAAe,EAAK7E,MAAM6E,aAGxB5C,EAAQ,YAAOP,EAAKO,UAPiD,cAQ3DP,EAAKiB,WARsD,IAQ3E,2BAAgC,CAAC,IAAtBuG,EAAqB,QAC5B,GAAID,EAAOnG,QAAQoG,EAAEpH,OAAS,EAAG,CAC7B,IAD6B,EACzBqH,GAAY,EADa,cAEblH,GAFa,IAE7B,2BAA0B,CAAC,IAAhBmH,EAAe,QACtB,GAAIA,EAAEtH,OAASoH,EAAEpH,KAAM,CACnBqH,GAAY,EACZ,QALqB,8BAQzBA,IACAlH,EAASI,KAAK6G,IACuB,IAAjCrE,EAAa/B,QAAQoG,EAAE9H,MAAayD,EAAaxC,KAAK6G,EAAE9H,MAGpE,GAAI4H,EAAOlG,QAAQoG,EAAEpH,OAAS,EAAG,CAC7B,IAAIuH,GAAY,EAChB,IAAK,IAAMC,KAAMrH,EACb,GAAIA,EAASqH,GAAIxH,OAASoH,EAAEpH,KAAM,CAC9BuH,EAAWE,SAASD,GACpB,MAGRrH,EAASuH,OAAOH,EAAU,KA9ByC,8BAiC3E,IAjC2E,EAiCvEI,EAAK,GAjCkE,cAkC3DxH,GAlC2D,IAkC3E,gCAAWN,EAAX,QAA0B8H,EAAGpH,KAAKV,EAAEG,OAlCuC,8BAmC3EJ,EAAK2B,MAAQ,EAAKE,gBAAgBjC,EAAMI,EAAM+H,GAC9C/H,EAAKO,SAAWA,GACwB,IAApC4C,EAAa/B,QAAQpB,EAAKN,MAAayD,EAAaxC,KAAKX,EAAKN,KAElE,IAAMlD,EAAOgE,EAAqBZ,EAAM,EAAKtB,MAAM9B,KAAMwD,GACzD,EAAK5B,SAAS,CAAC5B,OAAM2G,mBA3iBD,EA8iBxB+D,gBAAkB,SAAC5B,GACf,IAAM1F,EAAO0F,EAAE0C,OAAOC,aAAa,aAC7B7H,EAAOkF,EAAE0C,OAAOC,aAAa,aACnC,EAAKZ,aAAazH,EAAM,GAAI,CAACQ,KAjjBT,EAwjBxB4F,WAAa,SAACV,GACV,IAAM1F,EAAO0F,EAAE4C,cAAcD,aAAa,aAEpCjI,EAAOM,EAAkBV,EAAM,EAAKtB,MAAM9B,MAChD,GAAKwD,GAAkC,IAA1BA,EAAKiB,UAAUlD,OAA5B,CAEA,IAAMoK,EAAenI,EAAKO,SAASxC,OAE7BgG,EAAUnE,EAAO,IAAMuI,EACzBlE,EAAK,eAAOjE,EAAKiB,UAAU,IAC/BgD,EAAMvE,IAAMyI,EAEZ,IAAIhF,EAAe,EAAK7E,MAAM6E,aACX,WAAfc,EAAMvC,OACNuC,EAAQ,EAAKpD,cAAcb,EAAKiB,UAAU,GAAI8C,EAASnE,IACf,IAApCuD,EAAa/B,QAAQpB,EAAKN,MAAayD,EAAaxC,KAAKX,EAAKN,MACzB,IAArCyD,EAAa/B,QAAQ6C,EAAMvE,MAAayD,EAAaxC,KAAKsD,EAAMvE,MAExEM,EAAKO,SAASI,KAAKsD,GAEnB,IAAMzH,EAAOgE,EAAqBZ,EAAM,EAAKtB,MAAM9B,KAAMwD,GACzD,EAAK5B,SAAS,CAAC5B,OAAM2G,mBA7kBD,EAolBxB+C,WAAa,SAACZ,GACV,IAAM1F,EAAO0F,EAAE4C,cAAcD,aAAa,aAEpCjI,EAAOM,EAAkBV,EAAM,EAAKtB,MAAM9B,MAChD,GAAKwD,EAAL,CACA,IAAMN,EAAME,EAAO,IAAMf,EAAa,GAChCoF,EAAQ,CACVvE,MACAU,KAAM,GACNuB,MAAO,EAAKuC,kBAAkBxE,GAC9BgC,KAAMhE,EAAWyG,OACjBrG,MAAO,GACPyC,SAAU,IAEV4C,EAAe,EAAK7E,MAAM6E,cACM,IAAhCA,EAAa/B,QAAQxB,IAAcuD,EAAaxC,KAAKf,GACzDI,EAAKO,SAASI,KAAKsD,GACnB,IAAMzH,EAAOgE,EAAqBZ,EAAM,EAAKtB,MAAM9B,KAAMwD,GACzD,EAAK5B,SAAS,CAAC5B,OAAM2G,mBAtmBD,EA6mBxB0C,cAAgB,SAACP,GACb,IAAM1F,EAAO0F,EAAE4C,cAAcD,aAAa,aAE1C,GADa3H,EAAkBV,EAAM,EAAKtB,MAAM9B,MAChD,CACA,IAAIA,EAAOgE,EAAqBZ,EAAM,EAAKtB,MAAM9B,KAAM,MACvD,EAAK4B,SAAS,CAAC5B,WAlnBK,EAynBxBkK,WAAa,SAACpB,GACV,IAAM1F,EAAO0F,EAAE0C,OAAOC,aAAa,aACnCjF,QAAQC,IAAIrD,GACZ,IAAMI,EAAOM,EAAkBV,EAAM,EAAKtB,MAAM9B,MAChD,GAAKwD,EAAL,CACA,IAAIxD,EAAOgE,EAAqBZ,EAAM,EAAKtB,MAAM9B,KAAM,MACvD,EAAK4B,SAAS,CAAC5B,SAEf,IAAM4L,EAAUxI,EAAKG,MAAM,KACrBsI,EAAUD,EAAQrK,OACxB,GAAgB,IAAZsK,EAAJ,CACA,IAAMC,EAAaF,EAAQG,MAAM,EAAGF,EAAU,GAAGG,KAAK,KACtD,EAAKnB,aAAaiB,EAAY,CAACtI,EAAKI,UAroBhB,EA4oBxB8E,kBAAoB,SAACpB,GACjB,IAAM2E,EAASzD,KAAK0D,MAAM5E,GACpB9D,EAAOM,EAAkBmI,EAAO7I,KAAM,EAAKtB,MAAM9B,MACvD,GAAKwD,EAAL,CACAA,EAAKlC,MAAQ2K,EAAO3K,MACpB,IAAMtB,EAAOgE,EAAqBiI,EAAO7I,KAAM,EAAKtB,MAAM9B,KAAMwD,GAChE,EAAK5B,SAAS,CAAC5B,WAlpBK,EA0pBxBmI,iBAAmB,SAACW,GAAmC,IAA3BqD,IAA0B,yDAC5C/I,EAAO0F,EAAE0C,OAAOC,aAAa,aAC7BnK,EAAQwH,EAAE0C,OAAOlK,MACjBkC,EAAOM,EAAkBV,EAAM,EAAKtB,MAAM9B,MAChD,GAAKwD,EAAL,CACA2I,EAAQ3I,EAAKlC,MAAQA,EAAQkC,EAAKI,KAAOtC,EACzC,IAAMtB,EAAOgE,EAAqBZ,EAAM,EAAKtB,MAAM9B,KAAMwD,GACzD,EAAK5B,SAAS,CAAC5B,WAjqBK,EAyqBxBoM,SAAW,SAACC,EAAmBvD,GAC3BtC,QAAQC,IAAI,aAAc4F,IA1qBN,EAkrBxBC,SAAW,SAAC3F,EAAmBmC,GAC3B,IADsC,EAChCyD,EAAazD,EAAEtF,KAAKN,IACtBsJ,EAAsB,GAFY,cAGpB7F,GAHoB,IAGtC,2BAAgC,CAAC,IAAtBzD,EAAqB,SACK,IAA7BA,EAAI0B,QAAQ2H,IAAsBrJ,IAAQqJ,GAC9CC,EAAoBrI,KAAKjB,IALS,8BAOtC,EAAKtB,SAAS,CAAC+E,aAAc6F,KAzrBT,EAgsBxB5F,gBAAkB,SAACvD,GACf,IADkC,EAC9BsD,EAAyB,GADK,cAEftD,GAFe,IAElC,gCAAWG,EAAX,QAA0BmD,EAAaxC,KAAb,MAAAwC,EAAY,CAAMnD,EAAKN,KAAX,mBAAmB,EAAK0D,gBAAgBpD,EAAKO,cAFjD,8BAGlC,OAAO4C,GAnsBa,EAysBxB8F,QAAU,kBAAM,EAAK7K,SAAS,CAAC+E,aAAc,MAzsBrB,EA8sBxB+F,UAAY,kBAAM,EAAK9K,SAAS,CAAC+E,aAAc,EAAKC,gBAAgB,EAAK9E,MAAM9B,SA5sB3E,EAAK8B,MAAQ,CACTiF,QAAS5E,IAAMwK,YACf3M,KAAM,GACN2G,aAAc,IALE,E,0CAgtBxB,WACI,OACI,yBAAK5E,UAAWC,KAAKZ,MAAMW,WACvB,kBAAC,EAAD,CACI6K,IAAK5K,KAAKF,MAAMiF,QAChB1F,iBAAkBW,KAAKX,mBAE3B,kBAAC,IAAD,CACIU,UAAU,YACVqK,SAAUpK,KAAKoK,SACfE,SAAUtK,KAAKsK,SACfO,UAAU,EACVC,SAAU9K,KAAKF,MAAM9B,KACrB2G,aAAc3E,KAAKF,MAAM6E,oB,GA/tBzBxE,IAAMC,W,6FCgIX2K,I,yDA/HX,WAAY3L,GAAa,IAAD,8BACpB,cAAMA,IAUV4L,KAAO,WACC,EAAK5L,MAAM4L,MAAM,EAAK5L,MAAM4L,QAZZ,EAkBxBC,OAAS,WACD,EAAK7L,MAAM6L,QAAQ,EAAK7L,MAAM6L,UAnBd,EAyBxBC,MAAQ,WACA,EAAK9L,MAAM+L,WAAW,EAAK/L,MAAM+L,aA1BjB,EAgCxBjB,MAAQ,WACA,EAAK9K,MAAMgM,WAAW,EAAKhM,MAAMgM,aAjCjB,EAuCxBC,SAAW,WACP,IAAIC,EAAOC,SAASC,cAAc,YAClCF,EAAKhM,MAAQ,EAAKF,MAAMpB,KACxBuN,SAASE,KAAKC,YAAYJ,GAC1BA,EAAKK,SACLJ,SAASK,YAAY,QACrBL,SAASE,KAAKI,YAAYP,IA7CN,EAmDxBQ,aAAe,WACN,EAAK1M,MAAMpB,MAAMK,IAAQP,MAAM,wCACpC,IAAMiO,EAAUR,SAASC,cAAc,KACvCO,EAAQC,aAAa,OAAQ,iCAAmCC,mBAAmB,EAAK7M,MAAMpB,OAC9F,IAAMkO,EAAW7L,EAAa,GAAK,OACnC0L,EAAQC,aAAa,WAAYE,GACjCH,EAAQpF,MAAMwF,QAAU,OACxBZ,SAASE,KAAKC,YAAYK,GAC1BA,EAAQK,QACRb,SAASE,KAAKI,YAAYE,IA5DN,EAkExBM,WAAa,kBAAM,EAAKzM,SAAS,CAAC0M,eAAe,KAlEzB,EAuExBC,YAAc,kBAAM,EAAK3M,SAAS,CAAC0M,eAAe,KArE9C,EAAKxM,MAAQ,CACT0M,IAAK,EACLF,eAAe,GAJC,E,0CAyExB,WACI,OAAQ,oCACJ,kBAAC,IAAD,CAAOG,UAAWzM,KAAKF,MAAM0M,KACzB,yBAAKzM,UAAU,UACX,kBAAC,IAAD,CAAS+H,QAAQ,QAAQD,QAAQ,4BAC7B,kBAAC,IAAD,CAAQ9H,UAAU,MAAMmD,KAAK,UAAUkE,QAASpH,KAAKgL,MACjD,kBAACvD,EAAA,EAAD,QAGR,kBAAC,IAAD,CAASK,QAAQ,QAAQD,QAAQ,4BAC7B,kBAAC,IAAD,CAAQ9H,UAAU,MAAMmD,KAAK,UAAUkE,QAASpH,KAAKiL,QACjD,kBAACyB,EAAA,EAAD,QAGR,kBAAC,IAAD,CAAS5E,QAAQ,QAAQD,QAAQ,gBAC7B,kBAAC,IAAD,CAAQ9H,UAAU,MAAMmD,KAAK,UAAUkE,QAASpH,KAAKkK,OACjD,kBAACyC,EAAA,EAAD,QAGR,kBAAC,IAAD,CAAS7E,QAAQ,QAAQD,QAAQ,gBAC7B,kBAAC,IAAD,CAAQ9H,UAAU,MAAMmD,KAAK,UAAUkE,QAASpH,KAAKkL,OACjD,kBAAC0B,EAAA,EAAD,QAGR,kBAAC,IAAD,CAAS9E,QAAQ,QAAQD,QAAQ,gBAC7B,kBAAC,IAAD,CAAQ9H,UAAU,MAAMmD,KAAK,UAAUkE,QAASpH,KAAKqL,UACjD,kBAACwB,GAAA,EAAD,QAGR,kBAAC,IAAD,CAAS/E,QAAQ,QAAQD,QAAQ,gBAC7B,kBAAC,IAAD,CAAQ9H,UAAU,MAAMmD,KAAK,UAAUkE,QAASpH,KAAK8L,cACjD,kBAACgB,GAAA,EAAD,QAGR,kBAAC,IAAD,CAAShF,QAAQ,QAAQD,QAAQ,gBAC7B,kBAAC,IAAD,CAAQ9H,UAAU,MAAMmD,KAAK,UAAUkE,QAASpH,KAAKqM,YACjD,kBAACU,GAAA,EAAD,UAKhB,kBAAC,IAAD,CACI5J,MAAM,2BACN6J,UAAU,OACVC,UAAU,EACVC,QAASlN,KAAKF,MAAMwM,cACpBa,QAASnN,KAAKuM,aAEd,6D,GA3HKpM,IAAMC,Y,yCCN3BgN,EAAQ,K,IAEaC,G,kDAEjB,WAAYjO,GAAa,IAAD,8BACpB,cAAMA,IAaVkO,cAAgB,SAACtP,GAAD,OAAkB,EAAK4B,SAAS,CAAC2N,YAAavP,KAZ1D,EAAK8B,MAAQ,CACT0N,UAAWrN,IAAMwK,YACjB8C,SAAUtN,IAAMwK,YAChB4C,YAAa,GACbG,SAAU,IANM,E,0CAgBxB,WAAU,IAAD,OACL,OACI,yBAAK3N,UAAU,OACX,kBAAC,GAAD,CACI6K,IAAK5K,KAAKF,MAAM0N,UAChBxP,KAAMgC,KAAKF,MAAM4N,SACjB1C,KAAM,kBAAM,EAAKlL,MAAM2N,SAASzI,QAAQyF,WACxCQ,OAAQ,kBAAM,EAAKnL,MAAM2N,SAASzI,QAAQ0F,aAC1CS,UAAW,kBAAM,EAAKrL,MAAM2N,SAASzI,QAAQpB,iBAC7CwH,UAAW,WACPuC,MAAM,yBAGd,yBAAK5N,UAAU,QACX,kBAAC,EAAD,CACIA,UAAU,QACV6K,IAAK5K,KAAKF,MAAM2N,SAChB5J,cAAe7D,KAAKsN,gBAExB,kBAAC,eAAD,CACIvN,UAAU,QACVT,MAAOU,KAAKF,MAAMyN,YAClB1N,QAAS,CACL+N,KAAM,OACNC,MAAO,WACPC,aAAa,GAEjBC,eAAgB,SAACC,GACbA,EAAOC,QAAQ,OAAQ,MAE3BhO,SAAU,SAAC+N,EAAQhQ,EAAMsB,GACrB,EAAKM,SAAS,CAAC8N,SAAUpO,a,GAjDpBa,IAAMC,WA0DvC8N,IAASC,OAAO,kBAAC,GAAD,MAAQ5C,SAAS6C,eAAe,SRuE1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5O,MAAK,SAAA6O,GACJA,EAAaC,gBAEdC,OAAM,SAAA5Q,GACL0G,QAAQ1G,MAAMA,EAAMO,c","file":"static/js/main.8fa263f2.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","/**\n * request 网络请求工具\n * 更详细的 api 文档: https://github.com/umijs/umi-request\n */\nimport {extend} from 'umi-request';\nimport {notification} from 'antd';\n\nconst codeMessage: { [code: number]: string } = {\n    200: '服务器成功返回请求的数据。',\n    201: '新建或修改数据成功。',\n    202: '一个请求已经进入后台排队（异步任务）。',\n    204: '删除数据成功。',\n    400: '发出的请求有错误，服务器没有进行新建或修改数据的操作。',\n    401: '用户没有权限（令牌、用户名、密码错误）。',\n    403: '用户得到授权，但是访问是被禁止的。',\n    404: '发出的请求针对的是不存在的记录，服务器没有进行操作。',\n    406: '请求的格式不可得。',\n    410: '请求的资源被永久删除，且不会再得到的。',\n    422: '当创建一个对象时，发生一个验证错误。',\n    500: '服务器发生错误，请检查服务器。',\n    502: '网关错误。',\n    503: '服务不可用，服务器暂时过载或维护。',\n    504: '网关超时。',\n};\n\n/**\n * 异常处理程序\n */\nconst errorHandler = (error: { response: Response, data: any }): Response => {\n    const {response, data} = error;\n    if (response && response.status) {\n        const errorText = data ? data : (codeMessage[response.status] || response.statusText);\n        // const {status, url} = response;\n        notification.error({\n            message: `操作失败`,\n            description: errorText,\n        });\n    } else if (!response) {\n        notification.error({\n            message: '网络异常',\n            description: '您的网络发生异常，无法连接服务器',\n        });\n    }\n    return response;\n};\n\n/**\n * 配置request请求时的默认参数\n */\nconst requestWithExtend = extend({\n    errorHandler, // 默认错误处理\n    // credentials: 'include', // 默认请求是否带上cookie\n    headers: {\n        //'Content-Type': 'application/json;charset=utf-8',\n        //'Content-Type': 'application/x-www-form-urlencoded',\n        'Content-Type': 'application/json',\n    },\n});\n\nconst host = window.location.protocol + '//' + window.location.host\n\n/**\n * 封装一次request，使response可以统一校验后使用\n */\nconst request = async (url: string, option: any = {}) => {\n    let result = await requestWithExtend(host + url, {\n        getResponse: true,\n        ...option,\n        prefix: ''\n    });\n    return result.data;\n};\n\nexport default request;\n","import request from \"../utils/request\";\n\nexport interface InfoParamsType {\n    group: string;\n    kind: string;\n    version: string;\n}\n\nexport async function list(): Promise<any> {\n    return request('/resource/list')\n}\n\nexport async function info(params: InfoParamsType): Promise<any> {\n    return request('/resource/info', {params})\n}\n\nexport async function tree(params: InfoParamsType): Promise<any> {\n    return request('/resource/tree', {params})\n}\n","import * as React from \"react\";\n\nexport const ArrayNode = '-'\n\nexport enum SourceType {\n    String = 'string',      // 字符串\n    Number = 'number',      // 数值\n    Boolean = 'boolean',    // 布尔\n    Object = 'object',      // 对象\n    Array = 'array',        // 数组\n}\n\nexport interface KV {\n    key: string\n    value: string\n}\n\nexport interface ND {\n    name: string\n    desc: string\n}\n\nexport interface WithNV {\n    name: string\n    value: string\n}\n\n/*\n    默认类型为string，当items存在时默认为Object\n    指定类型为array时，当items存在时为arrayObject\n */\nexport interface Source {\n    name: string            // 名称\n    title: string           // 标题\n    desc: string            // 描述\n    value?: string          // 默认值\n    with?: WithNV           // 关联项，默认顶级查找spec.type\n    selects?: ND[]          // 选择项，第一个为默认\n    checked?: ND[]          // 判断项，第一个为默认\n    must?: boolean          // 是否必须存在，默认false\n    type?: SourceType       // 值类型，默认string\n    arrayType?: SourceType  // 数组子项类型\n    items?: Source[]        // 子项\n}\n\nexport interface SourceNode {\n    name: string            // 名称\n    title: string           // 标题\n    desc: string            // 描述\n    value: string           // 默认值\n    must: boolean           // 是否必须存在，默认false\n    type: SourceType        // 值类型，默认string\n    selects: ND[]           // 选择项，第一个为默认\n    checked: ND[]           // 判断项，第一个为默认\n    items: SourceNode[]     // 子项\n    with?: WithNV           // 关联项，默认顶级查找spec.type\n}\n\nexport interface TNode {\n    key: string,            // 全局唯一，格式为 index.path 如 pod.spec.containers.0.name\n    name: string,\n    title: React.ReactNode,\n    type: SourceType,\n    value: string,\n    children: TNode[],\n}\n","import React from \"react\";\nimport {Cascader} from 'antd';\nimport {list} from \"../api/resource\";\n\nclass KindList extends React.Component<any, any> {\n\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            options: [],\n        }\n        this.getOptions()\n    }\n\n    /**\n     * 生成原数据\n     * @param value\n     */\n    generateResource = (value: any) => {\n        if (value.length !== 3) return\n        if (this.props.generateResource)\n            this.props.generateResource(value[0], value[1], value[2])\n    }\n\n    getOptions = () => {\n        const that = this\n        list().then(function (result) {\n            that.setState({options: result})\n        })\n    }\n\n    render() {\n        return <Cascader\n            className=\"ml10\"\n            options={this.state.options}\n            onChange={value => this.generateResource(value)}\n            changeOnSelect\n        />\n    }\n}\n\nexport default KindList\n","import {ArrayNode, Source, SourceNode, SourceType, TNode} from \"./base\";\nimport jsyaml from \"js-yaml\";\n\n/**\n * 节点数据转object\n * @param nodes\n * @return any\n */\nexport function parseNodesToObj(nodes: SourceNode[]): any {\n    let obj: any = {}\n    for (const v of nodes) {\n        switch (v.type) {\n            case SourceType.Object:\n                obj[v.name] = parseNodesToObj(v.items)\n                break\n            case SourceType.Array:\n                obj[v.name] = []\n                break\n            default:\n                obj[v.name] = v.value\n                break\n        }\n    }\n    return obj\n}\n\n/**\n * 根据初始结构集补全初始结构集缺失数据\n * @param sources\n * @return BaseStruct[]\n */\nexport function sourceToNodeSet(sources: Source[]): SourceNode[] {\n    let full: SourceNode[] = []\n    for (const v of sources) {\n        v.items = v.items || []\n        if (v.items.length > 0 && !v.type) {\n            v.type = SourceType.Object\n        }\n        full.push({\n            name: v.name,\n            title: v.title,\n            desc: v.desc,\n            value: v.value || '',\n            must: v.must || false,\n            type: v.type || SourceType.String,\n            selects: v.selects || [],\n            checked: v.checked || [],\n            items: sourceToNodeSet(v.items),\n        })\n    }\n    return full\n}\n\n/**\n * 根据初始结构补全初始结构缺失数据\n * @param source\n * @return SourceNode\n */\nexport function sourceToNode(source: Source): SourceNode {\n    return {\n        name: source.name,\n        title: source.title,\n        desc: source.desc,\n        value: source.value || '',\n        must: source.must || false,\n        type: source.type || SourceType.String,\n        selects: source.selects || [],\n        checked: source.checked || [],\n        items: sourceToNodeSet(source.items || []),\n    }\n}\n\n/**\n * 根据节点路径获取节点信息\n * @param path\n * @param nodes\n * @return SourceNode | null\n */\nexport function getNodeByPath(path: string, nodes: SourceNode[]): SourceNode | null {\n    const paths = path.split('.')\n    let node: SourceNode | null = null\n    for (const v of paths) {\n        // 过滤数组key，非数字会返回NaN\n        if (parseFloat(v) >= 0) continue\n        node = null\n        for (const item of nodes) {\n            if (item.name === v) {\n                node = item\n                break\n            }\n        }\n        if (!node) break\n        nodes = node.items\n    }\n    return node\n}\n\n/**\n * 根据path获取Object\n * @param obj\n * @param paths\n * @return any\n */\nexport function getObjByPath(obj: any, paths: string[]): any {\n    for (const v of paths) {\n        if (!obj.hasOwnProperty(v)) {\n            return null\n        }\n        obj = obj[v]\n    }\n    return obj\n}\n\n/**\n * 根据path更新Object\n * @param obj\n * @param paths\n * @param value\n * @return any\n */\nexport function updateObjByPath(obj: any, paths: string[], value: any): any {\n    const pl = paths.length\n    if (pl === 0) {\n        return obj\n    }\n    let newObj: any = Array.isArray(obj) ? [] : {}\n    let exist: boolean = pl > 1\n    for (const k in obj) {\n        if (!obj.hasOwnProperty(k)) {\n            continue\n        }\n        const v = obj[k]\n        if (paths[0] === k) {\n            if (pl === 1) {\n                exist = true\n                newObj[k] = value\n                continue\n            }\n            if (typeof v === 'object') {\n                newObj[k] = updateObjByPath(v, paths.slice(1), value)\n                continue\n            }\n        }\n        newObj[k] = v\n    }\n    if (!exist) {\n        newObj[paths[0]] = value\n    }\n    return newObj\n}\n\n/**\n * 首字母小写\n * @param str\n * @return string\n */\nexport function strToLowerCase(str: string): string {\n    return str.replace(str[0], str[0].toLowerCase())\n}\n\n/**\n * 生成随机字符串\n * @param length\n * @return string\n */\nexport function randomString(length: number): string {\n    const chars: string = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    let result = ''\n    for (let i = length; i > 0; --i) result += chars[Math.floor(Math.random() * chars.length)]\n    return result\n}\n\n/**\n * object根据key排序\n * @param obj\n */\nfunction sortObj(obj: any): any {\n    let newObj: any = {};\n    Object.keys(obj).sort().map((key: any) => newObj[key] = obj[key])\n    return newObj\n}\n\n/**\n * 根据初始结构集补全树结构集缺失数据\n * @param sources\n * @return SourceNode[]\n */\nexport function nodeSetToTreeNodeSet(sources: SourceNode[]): SourceNode[] {\n    let full: SourceNode[] = []\n    for (const v of sources) {\n        const node = {...v}\n        if (node.type === SourceType.Array) {\n            const arrSource: Source = {\n                name: ArrayNode,\n                desc: '数组节点',\n                title: ArrayNode,\n                must: true,\n            }\n            if (node.items.length > 0) {\n                arrSource.type = SourceType.Object\n                arrSource.items = nodeSetToTreeNodeSet(node.items)\n            }\n            node.items = [sourceToNode(arrSource)]\n        } else {\n            node.items = nodeSetToTreeNodeSet(node.items)\n        }\n        full.push(node)\n    }\n    return full\n}\n\nexport function getNodeByPathWithTree(path: string, nodes: SourceNode[]): SourceNode | null {\n    const paths = path.split('.')\n    let node: SourceNode | null = null\n    for (const v of paths) {\n        node = null\n        // 过滤数组key，非数字会返回NaN\n        const index = parseFloat(v)\n        if (index >= 0) {\n            node = nodes[0]\n        } else {\n            for (const item of nodes) {\n                if (item.name === v) {\n                    node = item\n                    break\n                }\n            }\n        }\n        if (!node) break\n        nodes = node.items\n    }\n    return node\n}\n\n/**\n * 根据key获取树节点信息\n * @param key\n * @param nodes\n * @return TNode | null\n */\nexport function getTreeNodeByPath(key: string, nodes: any[]): any {\n    let node: any\n    for (const item of nodes) {\n        if (item.key === key) return item\n        node = getTreeNodeByPath(key, item.children)\n        if (node) return node\n    }\n    return node\n}\n\n/**\n * 根据key更新树节点信息\n * @param key\n * @param nodes\n * @param value\n * @return TNode[]\n */\nexport function updateTreeNodeByPath(key: string, nodes: TNode[], value: TNode | null): TNode[] {\n    let newNodes: TNode[] = []\n    for (const node of nodes) {\n        let newNode = {...node}\n        if (newNode.key === key) {\n            if (value) newNodes.push(value)\n            continue\n        }\n        newNode.children = updateTreeNodeByPath(key, newNode.children, value)\n        newNodes.push(newNode)\n    }\n    return newNodes\n}\n\n/**\n * obj转yaml\n * @param obj\n * @return string\n */\nexport function objToYaml(obj: any): string {\n    let str = ''\n    // 处理首次循环，获取类型拼接kind\n    for (const key in obj) {\n        if (!obj.hasOwnProperty(key)) continue\n        str += `---\\n`\n        str += jsyaml.safeDump(sortObj(obj[key]))\n    }\n    str += str !== '' ? '---' : ''\n    return str\n}\n\n/**\n * yaml转obj\n * @param str\n * @return any\n */\nexport function yamlToObjMulti(str: string): any {\n    let obj: any = {}\n    const arr = jsyaml.safeLoadAll(str)\n    for (const item of arr) {\n        if (!item) continue\n        // 处理kind\n        if (!item.hasOwnProperty('kind')) continue\n        const key = item.kind + '-' + randomString(6)\n        delete item.kind\n        obj[key] = item\n    }\n    return obj\n}\n","import React from \"react\";\nimport {Button, Input, Popover, Select, Tree} from \"antd\";\nimport {MinusCircleOutlined, PlusCircleOutlined, PlusSquareOutlined} from '@ant-design/icons'\nimport KindList from \"./KindList\";\nimport {ArrayNode, ND, SourceNode, SourceType, TNode} from \"../base/base\";\nimport {\n    getNodeByPathWithTree,\n    getTreeNodeByPath,\n    objToYaml,\n    randomString,\n    updateTreeNodeByPath,\n} from \"../base\";\nimport TextArea from \"antd/lib/input/TextArea\";\nimport {InfoParamsType, tree} from \"../api/resource\";\n\nclass CTree extends React.Component<any, any> {\n\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            kindRef: React.createRef(),\n            data: [],\n            expandedKeys: [],\n        }\n    }\n\n    /**\n     * 构建完整数据结构\n     * @param data 元数据\n     * @param prefix 额外添加的前缀\n     * @param cutPrefix 需要被替换的前缀\n     */\n    buildFullData = (data: any, prefix: string = '', cutPrefix: string = ''): any => {\n        if (prefix === '') prefix = randomString(6)\n        let result: any = {}\n        for (let k in data) {\n            if (!data.hasOwnProperty(k)) continue\n            result[k] = data[k]\n        }\n        result.children = []\n        result._children = []\n        let children = data.children\n        if (data._children && data._children.length > 0) children = data._children\n        for (let k in children) {\n            if (!children.hasOwnProperty(k)) continue\n            result._children.push(this.buildFullData(children[k], prefix, cutPrefix))\n        }\n        if (data.required && data.required.length > 0) {\n            for (let vv of data.children) {\n                if (data.required.indexOf(vv.name) === -1) continue\n                let child = this.buildFullData(vv, prefix, cutPrefix)\n                child.stats = {\n                    isRequired: true,\n                    isEdit: true,\n                }\n                // 设置默认字段不允许编辑\n                if (['root.apiVersion', 'root.kind'].indexOf(child.key) !== -1) child.stats.isEdit = false\n                result.children.push(child)\n            }\n        }\n\n        // 添加节点状态\n        if (!result.stats) result.stats = {\n            isRequired: false,\n            isEdit: true,\n        }\n        // 重构节点唯一key\n        if (cutPrefix !== '') {\n            result.key = result.key.replace(cutPrefix, prefix)\n        } else {\n            result.key = prefix + '.' + result.key\n        }\n        // 构建Base Element元素标题\n        switch (result.type) {\n            case 'array':\n                result.title = this.createAppendArrayNode(\n                    result.key,\n                    this.createMenuTitle(result.key, result)\n                )\n                break\n            case 'object': // 对象节点，object string/string\n                if (result._children.length === 0) {\n                    result.title = this.createAppendObjectNode(result.key, result)\n                } else {\n                    result.title = this.createMenuTitle(result.key, result)\n                }\n                break\n            case 'boolean':\n                const options: ND[] = [\n                    {name: 'true', desc: 'true'},\n                    {name: 'false', desc: 'false'},\n                ]\n                result.title = this.createPrefixNode(\n                    this.createMenuTitle(result.key, result),\n                    this.createSelectNode(result.key, options, result.value)\n                )\n                break\n            default:\n                // 构建Select Element元素标题\n                if (result.enums && result.enums.length > 0) {\n                    let options: ND[] = []\n                    for (const v of result.enums) {\n                        options.push({\n                            name: v,\n                            desc: v,\n                        })\n                    }\n                    result.title = this.createPrefixNode(\n                        this.createMenuTitle(result.key, result),\n                        this.createSelectNode(result.key, options, result.value)\n                    )\n                } else {\n                    result.title = this.createPrefixNode(\n                        this.createMenuTitle(result.key, result),\n                        this.createInputNode(result.key, result.value)\n                    )\n                }\n                break\n        }\n        return result\n    }\n\n    /**\n     * 生成Yaml字符串\n     */\n    convertToYaml = () => {\n        if (this.props.buildYamlData) {\n            let data: any[] = []\n            for (const v of this.state.data) {\n                const item = this.parseTreeToObj([v])\n                data.push(item)\n            }\n            const yamlData = objToYaml(data)\n            this.props.buildYamlData(yamlData)\n        }\n    }\n\n    /**\n     * 获取kind对应的渲染数据，并向数据集中增加一组\n     * @param group\n     * @param kind\n     * @param version\n     */\n    generateResource = (group: string, kind: string, version: string) => {\n        const that = this\n        const params: InfoParamsType = {group, kind, version}\n        tree(params).then(function (result: any) {\n            console.log(result)\n            const fullData = that.buildFullData(result)\n            console.log(fullData)\n            const data = [...that.state.data, fullData]\n            that.setState({data, expandedKeys: that.getExpandedKeys(data)})\n        })\n\n    }\n\n    /**\n     * obj转tree\n     * @param obj\n     * @return TNode[]\n     */\n    parseObjToTreeData = (obj: any): TNode[] => {\n        let data: TNode[] = []\n        for (const key in obj) {\n            if (!obj.hasOwnProperty(key)) continue\n            const kind: string = key.split('-')[0]\n            const resource: SourceNode[] = this.state.kindRef.current.getResource(kind, 'tree')\n            let root: TNode = {\n                key,\n                name: key,\n                title: kind,\n                type: SourceType.Object,\n                value: '',\n                children: this.parseObjToTree(obj[key], resource, key)\n            }\n            data.push(root)\n        }\n        return data\n    }\n\n    /**\n     * obj根据resource转tree\n     * @param obj\n     * @param resource\n     * @param prefixKey\n     * @param path\n     * @param skipNode\n     * @return TNode[]\n     */\n    parseObjToTree = (obj: any, resource: SourceNode[], prefixKey: string, path: string = '', skipNode: boolean = false): TNode[] => {\n        /**\n         * 根据obj的key拼接成path，根据path获取resource的node信息\n         * 根据resource和path渲染tree\n         *   ->\n         */\n        let data: TNode[] = []\n        path = path === '' ? '' : path + '.'\n        for (const key in obj) {\n            if (!obj.hasOwnProperty(key)) continue\n            const val = obj[key]\n            const keyPath = path + key\n            const fullKey = prefixKey + '.' + keyPath\n            if (skipNode) {\n                let tNode: TNode = {\n                    key: fullKey,\n                    name: key,\n                    title: this.createKVInputNode(fullKey, key, val),\n                    type: SourceType.String,\n                    value: val,\n                    children: []\n                }\n                data.push(tNode)\n                continue\n            }\n            const node = getNodeByPathWithTree(keyPath, resource)\n            if (!node) continue\n            let tNode: TNode = {\n                key: fullKey,\n                name: node.name,\n                title: node.name,\n                type: node.type,\n                value: '',\n                children: []\n            }\n            switch (node.type) {\n                case SourceType.Object:\n                    // 如果不存在子节点\n                    if (node.items.length === 0) {\n                        tNode.title = this.createAppendObjectNode(fullKey, node)\n                        tNode.children = this.parseObjToTree(val, resource, prefixKey, keyPath, true)\n                    } else {\n                        tNode.title = this.createMenuTitle(fullKey, node)\n                        tNode.children = this.parseObjToTree(val, resource, prefixKey, keyPath)\n                    }\n                    break\n                case SourceType.Array:\n                    tNode.title = this.createAppendArrayNode(fullKey, this.createMenuTitle(fullKey, node))\n                    tNode.children = this.parseObjToTree(val, resource, prefixKey, keyPath)\n                    break\n                case SourceType.Boolean:\n                    if (node.selects.length === 0) node.selects = [\n                        {name: 'true', desc: 'true'},\n                        {name: 'false', desc: 'false'}\n                    ]\n                    tNode.title = this.createPrefixNode(\n                        this.createMenuTitle(fullKey, node),\n                        this.createSelectNode(fullKey, node.selects)\n                    )\n                    tNode.value = val === '' ? node.selects[0].name : val\n                    break\n                default:\n                    if (node.selects.length > 0) {\n                        if (val !== '') {\n                            for (const v of node.selects) {\n                                if (v.name === val) {\n                                    tNode.value = val\n                                    break\n                                }\n                            }\n                        }\n                        if (tNode.value === '') tNode.value = node.selects[0].name\n                        tNode.title = this.createPrefixNode(\n                            this.createMenuTitle(fullKey, node),\n                            this.createSelectNode(fullKey, node.selects, tNode.value)\n                        )\n                    } else {\n                        tNode.title = this.createPrefixNode(\n                            this.createMenuTitle(fullKey, node),\n                            this.createInputNode(fullKey, val)\n                        )\n                        tNode.value = val\n                    }\n                    break\n            }\n            data.push(tNode)\n        }\n        return data\n    }\n\n    /**\n     * tree转obj\n     * @param nodes\n     * @return any\n     */\n    parseTreeToObj = (nodes: any[]): any => {\n        let obj: any = {}\n        for (const v of nodes) {\n            switch (v.type) {\n                case SourceType.Object:\n                    obj[v.name] = this.parseTreeToObj(v.children)\n                    break\n                case SourceType.Array:\n                    let arr = []\n                    for (const va of v.children) {\n                        if (va.type === SourceType.Object) {\n                            if (va.children.length > 0) arr.push(this.parseTreeToObj(va.children))\n                        } else {\n                            if (va.value !== '') arr.push(va.value)\n                        }\n                    }\n                    obj[v.name] = arr\n                    break\n                default:\n                    if (v.name !== '') obj[v.name] = v.value\n                    break\n            }\n        }\n        return obj\n    }\n\n    // 添加text节点\n    createTextNode = (path: string, source: SourceNode) => {\n        return <TextArea data-path={path} onChange={this.changeInputValue} defaultValue={source.value}/>\n    }\n\n    /**\n     * 添加select节点\n     * @param selectData\n     * @param path\n     * @param value\n     * @return React.ReactNode\n     */\n    createSelectNode = (path: string, selectData: ND[], value: string = '') => {\n        let optionData = []\n        for (const v of selectData) {\n            optionData.push({\n                label: v.name,\n                value: JSON.stringify({value: v.name, path})\n            })\n        }\n        const defaultValue = JSON.stringify({\n            value: value === '' ? selectData[0].name : value,\n            path\n        })\n        return <Select\n            defaultValue={defaultValue}\n            className=\"selectStyle\"\n            onChange={this.changeSelectValue}\n            key={path + randomString(3)}\n            options={optionData}\n        />\n    }\n\n    /**\n     * 添加input文本节点\n     * @param path\n     * @param value\n     * @return React.ReactNode\n     */\n    createInputNode = (path: string, value: string = '') => {\n        return <Input data-path={path} onChange={this.changeInputValue} defaultValue={value}/>\n    }\n\n    /**\n     * 添加K/V input文本节点\n     * @param path\n     * @param name\n     * @param value\n     * @return React.ReactNode\n     */\n    createKVInputNode = (path: string, name: string = '', value: string = '') => {\n        return this.createPrefixNode(<Input\n            data-path={path}\n            style={{width: '150px', height: '80%'}}\n            onChange={e => this.changeInputValue(e, false)}\n            defaultValue={name}\n        />, this.createDeleteNode(path, this.createInputNode(path, value)))\n    }\n\n    /**\n     * 添加数组input文本节点\n     * @param path\n     */\n    createArrInputNode = (path: string) => this.createPrefixNode(ArrayNode, this.createDeleteNode(path, this.createInputNode(path)))\n\n    /**\n     * 创建移除节点按钮\n     * @param path\n     * @param node\n     */\n    createDeleteNode = (path: string, node: React.ReactNode) => {\n        return (<>\n            <span className=\"floatLeft\">{node}</span>\n            <span className=\"floatLeft\">\n                <Button\n                    data-path={path}\n                    type='link'\n                    icon={<MinusCircleOutlined/>}\n                    danger\n                    onClick={this.removeObjItem}\n                />\n            </span>\n        </>)\n    }\n\n    /**\n     * 添加数组按钮节点\n     * @param path\n     * @param node\n     * @return React.ReactNode\n     */\n    createAppendArrayNode = (path: string, node: React.ReactNode) => {\n        return (\n            <div className=\"flex\">\n                <span className=\"f1\">{node}</span>\n                <Button\n                    className=\"f1\"\n                    data-path={path}\n                    type=\"link\"\n                    icon={<PlusCircleOutlined/>}\n                    style={{marginTop: '-4px'}}\n                    onClick={this.addArrItem}\n                />\n            </div>\n        )\n    }\n\n    /**\n     * 添加对象按钮节点\n     * @param path\n     * @param source\n     * @return React.ReactNode\n     */\n    createAppendObjectNode = (path: string, source: SourceNode) => {\n        return (\n            <div className=\"flex\">\n                <span className=\"f1\">{this.createMenuTitle(path, source)}</span>\n                <Button\n                    className=\"f1\"\n                    data-path={path}\n                    type=\"link\"\n                    icon={<PlusSquareOutlined/>}\n                    style={{marginTop: '-4px'}}\n                    onClick={this.addObjItem}\n                />\n            </div>\n        )\n    }\n\n    /**\n     * 创建节点前缀\n     * @param name\n     * @param node\n     * @return React.ReactNode\n     */\n    createPrefixNode = (name: React.ReactNode, node: React.ReactNode) => {\n        return (\n            <span className=\"ant-input-wrapper ant-input-group\">\n                <span className=\"ant-input-group-addon\"> {name} </span>\n                <span> {node} </span>\n            </span>\n        )\n    }\n\n    /**\n     * 构建标题\n     * @param title\n     * @param tipContent\n     * @param key\n     * @return React.ReactNode\n     */\n    createTitle = (title: React.ReactNode, tipContent: string, key: number = 0) => {\n        if (tipContent === '') return title\n        return <Popover\n            content={tipContent}\n            trigger=\"hover\"\n            arrowPointAtCenter\n            key={key}\n        > {title} </Popover>\n    }\n\n    // 构建移除菜单\n    createDeleteMenu = (path: string, isArray: boolean = false) => {\n        return <Button\n            key=\"del\"\n            data-path={path}\n            className=\"ml2\"\n            type=\"primary\"\n            onClick={isArray ? this.removeObjItem : this.removeItem}\n\n            style={{margin: '5px'}}\n            danger\n        > delete </Button>\n    }\n\n    /**\n     * 构建子项菜单\n     * @param path 节点唯一路径标识\n     * @param source 该节点数据集\n     * @param childs 该节点当前渲染的子节点集合\n     * @return React.ReactNode\n     */\n    createMenuTitle = (path: string, source: any, childs: string[] = []) => {\n        // 获取未渲染的子项\n        let desc = ''\n        if (source.descs && source.descs.length > 0) desc = source.descs[0].desc\n        let notExistChildren = []\n        for (const item of source.children) childs.push(item.name)\n        for (const item of source._children) if (childs.indexOf(item.name) === -1) notExistChildren.push(item)\n        // 如果子项都渲染过并且为required节点， 则直接返回\n        if (notExistChildren.length === 0 && source.stats.isRequired) return this.createTitle(source.name, desc)\n        // 渲染不存在子项选择\n        let set = notExistChildren.map((child, index) => {\n            // TODO 支持根据zh/en自动识别渲染\n            let desc = ''\n            if (child.descs && child.descs.length > 0) desc = child.descs[0].desc\n            return this.createTitle(<Button\n                data-path={path}\n                data-name={child.name}\n                className=\"ml2\"\n                type=\"primary\"\n                key={index}\n                onClick={this.addItemFromMenu}\n                style={{margin: '5px'}}\n            > {child.name} </Button>, desc, index)\n        })\n        // 不是required节点或者数组节点，构建基础菜单\n        if (!source.stats.isRequired) set.unshift(this.createDeleteMenu(path, source.type === 'array'))\n        if (source.type === 'array') set = [this.createDeleteMenu(path, source.type === 'array')]\n        return this.createTitle(<Popover\n            trigger=\"click\"\n            content={<div style={{maxWidth: '500px'}}>{set}</div>}\n            arrowPointAtCenter\n        > {source.name} </Popover>, desc)\n    }\n\n    /**\n     * 同步菜单项\n     * @param path\n     * @param addSet  需要添加的子项菜单名\n     * @param delSet  需要移除的子项菜单名\n     */\n    syncItemMenu = (path: string, addSet: string[] = [], delSet: string[] = []) => {\n        // 获取选中节点\n        const node = getTreeNodeByPath(path, this.state.data)\n        if (!node) return\n        let expandedKeys = this.state.expandedKeys\n\n        // 添加或移除子项\n        const children = [...node.children]\n        for (const s of node._children) {\n            if (delSet.indexOf(s.name) > -1) {\n                let delStatus = true\n                for (const c of children) {\n                    if (c.name === s.name) {\n                        delStatus = false\n                        break\n                    }\n                }\n                if (delStatus) {\n                    children.push(s)\n                    if (expandedKeys.indexOf(s.key) === -1) expandedKeys.push(s.key)\n                }\n            }\n            if (addSet.indexOf(s.name) > -1) {\n                let addIndex = -1\n                for (const ck in children) {\n                    if (children[ck].name === s.name) {\n                        addIndex = parseInt(ck)\n                        break\n                    }\n                }\n                children.splice(addIndex, 1)\n            }\n        }\n        let cs = []\n        for (const v of children) cs.push(v.name)\n        node.title = this.createMenuTitle(path, node, cs)\n        node.children = children\n        if (expandedKeys.indexOf(node.key) === -1) expandedKeys.push(node.key)\n        // 更新选中节点\n        const data = updateTreeNodeByPath(path, this.state.data, node)\n        this.setState({data, expandedKeys})\n    }\n\n    addItemFromMenu = (e: any) => {\n        const path = e.target.getAttribute('data-path')\n        const name = e.target.getAttribute('data-name')\n        this.syncItemMenu(path, [], [name])\n    }\n\n    /**\n     * 添加arr节点子项\n     * @param e\n     */\n    addArrItem = (e: any) => {\n        const path = e.currentTarget.getAttribute('data-path')\n        // 根据path获取到tree的数组节点\n        const node = getTreeNodeByPath(path, this.state.data)\n        if (!node || node._children.length === 0) return\n        // 获取实际渲染数组节点数量\n        const nodeChildNum = node.children.length\n        // 默认构建普通数组节点\n        const keyPath = path + '.' + nodeChildNum\n        let tNode = {...node._children[0]}\n        tNode.key = nodeChildNum\n        // 数组节点添加需要重新构造添加后的所有子项key\n        let expandedKeys = this.state.expandedKeys\n        if (tNode.type === 'object') {\n            tNode = this.buildFullData(node._children[0], keyPath, path)\n            if (expandedKeys.indexOf(node.key) === -1) expandedKeys.push(node.key)\n            if (expandedKeys.indexOf(tNode.key) === -1) expandedKeys.push(tNode.key)\n        }\n        node.children.push(tNode)\n        // 根据path更新tree\n        const data = updateTreeNodeByPath(path, this.state.data, node)\n        this.setState({data, expandedKeys})\n    }\n\n    /**\n     * 添加obj节点子项\n     * @param e\n     */\n    addObjItem = (e: any) => {\n        const path = e.currentTarget.getAttribute('data-path')\n        // 根据path获取tree节点信息\n        const node = getTreeNodeByPath(path, this.state.data)\n        if (!node) return\n        const key = path + '.' + randomString(6)\n        const tNode = {\n            key,\n            name: '',\n            title: this.createKVInputNode(key),\n            type: SourceType.String,\n            value: '',\n            children: [],\n        }\n        let expandedKeys = this.state.expandedKeys\n        if (expandedKeys.indexOf(path) === -1) expandedKeys.push(path)\n        node.children.push(tNode)\n        const data = updateTreeNodeByPath(path, this.state.data, node)\n        this.setState({data, expandedKeys})\n    }\n\n    /**\n     * 移除节点数组/KV子项\n     * @param e\n     */\n    removeObjItem = (e: any) => {\n        const path = e.currentTarget.getAttribute('data-path')\n        const node = getTreeNodeByPath(path, this.state.data)\n        if (!node) return\n        let data = updateTreeNodeByPath(path, this.state.data, null)\n        this.setState({data})\n    }\n\n    /**\n     * 移除节点子项\n     * @param e\n     */\n    removeItem = (e: any) => {\n        const path = e.target.getAttribute('data-path')\n        console.log(path)\n        const node = getTreeNodeByPath(path, this.state.data)\n        if (!node) return\n        let data = updateTreeNodeByPath(path, this.state.data, null)\n        this.setState({data})\n        // 存在父节点，更新menu\n        const pathArr = path.split('.')\n        const pathLen = pathArr.length\n        if (pathLen === 1) return\n        const parentPath = pathArr.slice(0, pathLen - 1).join('.')\n        this.syncItemMenu(parentPath, [node.name])\n    }\n\n    /**\n     * 修改select内容\n     * @param val\n     */\n    changeSelectValue = (val: string) => {\n        const valObj = JSON.parse(val)\n        const node = getTreeNodeByPath(valObj.path, this.state.data)\n        if (!node) return\n        node.value = valObj.value\n        const data = updateTreeNodeByPath(valObj.path, this.state.data, node)\n        this.setState({data})\n    }\n\n    /**\n     * 修改input内容\n     * @param e\n     * @param isVal\n     */\n    changeInputValue = (e: any, isVal: boolean = true) => {\n        const path = e.target.getAttribute('data-path')\n        const value = e.target.value\n        const node = getTreeNodeByPath(path, this.state.data)\n        if (!node) return\n        isVal ? node.value = value : node.name = value\n        const data = updateTreeNodeByPath(path, this.state.data, node)\n        this.setState({data})\n    }\n\n    /**\n     * 选中树节点\n     * @param selectedKeys\n     * @param e {selected: bool, selectedNodes, node, event}\n     */\n    onSelect = (selectedKeys: any, e: any) => {\n        console.log('onSelect: ', selectedKeys)\n    }\n\n    /**\n     * 展开节点\n     * @param expandedKeys\n     * @param e {expanded: bool, node: TNode}\n     */\n    onExpand = (expandedKeys: any, e: any) => {\n        const currentKey = e.node.key\n        let currentExpandedKeys = []\n        for (const key of expandedKeys) {\n            if (key.indexOf(currentKey) !== -1 && key !== currentKey) continue\n            currentExpandedKeys.push(key)\n        }\n        this.setState({expandedKeys: currentExpandedKeys})\n    }\n\n    /**\n     * 根据树数据获取全部节点key\n     * @param nodes\n     */\n    getExpandedKeys = (nodes: TNode[]) => {\n        let expandedKeys: string[] = []\n        for (const node of nodes) expandedKeys.push(node.key, ...this.getExpandedKeys(node.children))\n        return expandedKeys\n    }\n\n    /**\n     * 折叠所有节点\n     */\n    foldAll = () => this.setState({expandedKeys: []})\n\n    /**\n     * 展开所有节点\n     */\n    unfoldAll = () => this.setState({expandedKeys: this.getExpandedKeys(this.state.data)})\n\n    render() {\n        return (\n            <div className={this.props.className}>\n                <KindList\n                    ref={this.state.kindRef}\n                    generateResource={this.generateResource}\n                />\n                <Tree\n                    className=\"treeStyle\"\n                    onSelect={this.onSelect}\n                    onExpand={this.onExpand}\n                    showLine={true}\n                    treeData={this.state.data}\n                    expandedKeys={this.state.expandedKeys}\n                />\n            </div>\n        )\n    }\n}\n\nexport default CTree\n","import React from \"react\";\nimport {message, Affix, Button, Popover, Drawer} from \"antd\";\nimport {\n    PlusSquareOutlined,\n    MinusSquareOutlined,\n    CopyOutlined,\n    DownloadOutlined,\n    DoubleLeftOutlined,\n    DoubleRightOutlined,\n    SettingOutlined\n} from '@ant-design/icons'\nimport './index.css'\nimport {randomString} from \"../base\";\n\nclass NavBar extends React.Component<any, any> {\n\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            top: 0,\n            configVisible: false,\n        }\n    }\n\n    /**\n     * 折叠\n     */\n    fold = () => {\n        if (this.props.fold) this.props.fold()\n    }\n\n    /**\n     * 展开\n     */\n    unfold = () => {\n        if (this.props.unfold) this.props.unfold()\n    }\n\n    /**\n     * 构建树结构\n     */\n    build = () => {\n        if (this.props.buildData) this.props.buildData()\n    }\n\n    /**\n     * 解析为yaml\n     */\n    parse = () => {\n        if (this.props.parseData) this.props.parseData()\n    }\n\n    /**\n     * 复制\n     */\n    copyData = () => {\n        let text = document.createElement(\"textarea\");    // 直接构建textarea\n        text.value = this.props.data                               // 设置内容\n        document.body.appendChild(text);                           // 添加临时实例\n        text.select();                                             // 选择实例内容\n        document.execCommand(\"Copy\");                  // 执行复制\n        document.body.removeChild(text);                           // 删除临时实例\n    }\n\n    /**\n     * 下载\n     */\n    downloadData = () => {\n        if (!this.props.data) message.error('无内容可下载')\n        const element = document.createElement('a');\n        element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(this.props.data));\n        const filename = randomString(6) + '.yml'\n        element.setAttribute('download', filename);\n        element.style.display = 'none';\n        document.body.appendChild(element);\n        element.click();\n        document.body.removeChild(element);\n    }\n\n    /**\n     * 打开配置\n     */\n    configOpen = () => this.setState({configVisible: true})\n\n    /**\n     * 关闭配置\n     */\n    configClose = () => this.setState({configVisible: false})\n\n    render() {\n        return (<>\n            <Affix offsetTop={this.state.top}>\n                <div className=\"navBar\">\n                    <Popover trigger=\"hover\" content=\"折叠全部\">\n                        <Button className=\"ml2\" type=\"primary\" onClick={this.fold}>\n                            <PlusSquareOutlined/>\n                        </Button>\n                    </Popover>\n                    <Popover trigger=\"hover\" content=\"展开全部\">\n                        <Button className=\"ml2\" type=\"primary\" onClick={this.unfold}>\n                            <MinusSquareOutlined/>\n                        </Button>\n                    </Popover>\n                    <Popover trigger=\"hover\" content=\"解析\">\n                        <Button className=\"ml2\" type=\"primary\" onClick={this.parse}>\n                            <DoubleLeftOutlined/>\n                        </Button>\n                    </Popover>\n                    <Popover trigger=\"hover\" content=\"构建\">\n                        <Button className=\"ml2\" type=\"primary\" onClick={this.build}>\n                            <DoubleRightOutlined/>\n                        </Button>\n                    </Popover>\n                    <Popover trigger=\"hover\" content=\"复制\">\n                        <Button className=\"ml2\" type=\"primary\" onClick={this.copyData}>\n                            <CopyOutlined/>\n                        </Button>\n                    </Popover>\n                    <Popover trigger=\"hover\" content=\"粘贴\">\n                        <Button className=\"ml2\" type=\"primary\" onClick={this.downloadData}>\n                            <DownloadOutlined/>\n                        </Button>\n                    </Popover>\n                    <Popover trigger=\"hover\" content=\"设置\">\n                        <Button className=\"ml2\" type=\"primary\" onClick={this.configOpen}>\n                            <SettingOutlined/>\n                        </Button>\n                    </Popover>\n                </div>\n            </Affix>\n            <Drawer\n                title=\"高级设置\"\n                placement=\"left\"\n                closable={false}\n                visible={this.state.configVisible}\n                onClose={this.configClose}\n            >\n                <p>敬请期待</p>\n            </Drawer>\n        </>);\n    }\n}\n\nexport default NavBar\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport CTree from \"./components/CTree\";\nimport {UnControlled as CodeMirror} from \"react-codemirror2\";\nimport NavBar from \"./components/NavBar\";\n\nrequire('codemirror/mode/yaml/yaml')\n\nexport default class App extends React.Component<any, any> {\n\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            navBarRef: React.createRef(),\n            cTreeRef: React.createRef(),\n            defaultData: '',\n            codeData: '',\n        }\n    }\n\n    /**\n     * 构建code内容\n     * @param data\n     */\n    buildCodeData = (data: string) => this.setState({defaultData: data})\n\n    render() {\n        return (\n            <div className=\"App\">\n                <NavBar\n                    ref={this.state.navBarRef}\n                    data={this.state.codeData}\n                    fold={() => this.state.cTreeRef.current.foldAll()}\n                    unfold={() => this.state.cTreeRef.current.unfoldAll()}\n                    buildData={() => this.state.cTreeRef.current.convertToYaml()}\n                    parseData={() => {\n                        alert('开发中')\n                    }}\n                />\n                <div className=\"flex\">\n                    <CTree\n                        className=\"trees\"\n                        ref={this.state.cTreeRef}\n                        buildYamlData={this.buildCodeData}\n                    />\n                    <CodeMirror\n                        className=\"codes\"\n                        value={this.state.defaultData}\n                        options={{\n                            mode: 'yaml',\n                            theme: 'material',\n                            lineNumbers: true\n                        }}\n                        editorDidMount={(editor) => {\n                            editor.setSize('auto', 500)\n                        }}\n                        onChange={(editor, data, value) => {\n                            this.setState({codeData: value})\n                        }}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}