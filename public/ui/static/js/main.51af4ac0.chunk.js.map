{"version":3,"sources":["serviceWorker.ts","utils/request.ts","api/resource.ts","base/base.ts","components/KindList.tsx","base/index.ts","components/CTree.tsx","components/NavBar.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","codeMessage","200","201","202","204","400","401","403","404","406","410","422","500","502","503","504","requestWithExtend","extend","errorHandler","error","response","data","status","errorText","Object","keys","length","statusText","console","log","notification","message","description","headers","host","protocol","request","url","a","option","getResponse","prefix","result","list","type","params","tree","SourceType","uploadUrl","KindList","props","generateResource","value","getOptions","that","then","setState","options","customOptions","state","className","placeholder","this","onChange","changeOnSelect","React","Component","randomString","chars","i","Math","floor","random","sortObj","obj","newObj","sort","map","key","getTreeNodeByPath","nodes","node","item","children","updateTreeNodeByPath","newNodes","newNode","push","CTree","buildFullData","cutPrefix","k","hasOwnProperty","_children","required","vv","indexOf","name","child","stats","isRequired","isEdit","replace","title","createAppendArrayNode","createMenuTitle","createAppendObjectNode","desc","createPrefixNode","createSelectNode","enums","v","createInputNode","buildFullDataWithObj","tNode","createKVInputNode","String","convertToYaml","buildYamlData","parseTreeToObj","yamlData","str","jsyaml","safeDump","objToYaml","convertToTreeData","code","arr","safeLoadAll","kind","yamlToObjMulti","e","apiVersion","versionData","split","unshift","group","version","fullData","expandedKeys","getExpandedKeys","catch","reason","Array","va","path","selectData","optionData","label","JSON","stringify","defaultValue","changeSelectValue","style","height","minHeight","data-path","changeInputValue","width","createDeleteNode","createArrInputNode","icon","MinusCircleOutlined","danger","onClick","removeObjItem","PlusCircleOutlined","marginTop","addArrItem","source","PlusSquareOutlined","addObjItem","createTitle","tipContent","content","trigger","arrowPointAtCenter","createDeleteMenu","isArray","removeItem","margin","childs","descs","notExistChildren","set","index","data-name","addItemFromMenu","maxWidth","syncItemMenu","addSet","delSet","s","delStatus","c","addIndex","ck","parseInt","splice","cs","currentTarget","getAttribute","nodeChildNum","keyPath","pathArr","pathLen","parentPath","slice","join","val","valObj","parse","isVal","onSelect","selectedKeys","onExpand","currentKey","currentExpandedKeys","foldAll","unfoldAll","kindRef","createRef","ref","showLine","treeData","action","showUploadList","maxCount","info","file","success","NavBar","fold","unfold","build","buildData","parseData","copyData","text","document","createElement","body","appendChild","select","execCommand","removeChild","downloadData","element","setAttribute","encodeURIComponent","filename","display","click","configOpen","configVisible","configClose","top","offsetTop","SettingOutlined","MinusSquareOutlined","DoubleLeftOutlined","DoubleRightOutlined","CopyOutlined","DownloadOutlined","UploadOutlined","placement","closable","visible","onClose","require","App","buildCodeData","defaultData","navBarRef","cTreeRef","codeData","current","mode","theme","lineNumbers","editorDidMount","editor","setSize","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.51af4ac0.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","/**\n * request 网络请求工具\n * 更详细的 api 文档: https://github.com/umijs/umi-request\n */\nimport {extend} from 'umi-request';\nimport {notification} from 'antd';\n\nconst codeMessage: { [code: number]: string } = {\n    200: '服务器成功返回请求的数据。',\n    201: '新建或修改数据成功。',\n    202: '一个请求已经进入后台排队（异步任务）。',\n    204: '删除数据成功。',\n    400: '发出的请求有错误，服务器没有进行新建或修改数据的操作。',\n    401: '用户没有权限（令牌、用户名、密码错误）。',\n    403: '用户得到授权，但是访问是被禁止的。',\n    404: '发出的请求针对的是不存在的记录，服务器没有进行操作。',\n    406: '请求的格式不可得。',\n    410: '请求的资源被永久删除，且不会再得到的。',\n    422: '当创建一个对象时，发生一个验证错误。',\n    500: '服务器发生错误，请检查服务器。',\n    502: '网关错误。',\n    503: '服务不可用，服务器暂时过载或维护。',\n    504: '网关超时。',\n};\n\n/**\n * 异常处理程序\n */\nconst errorHandler = (error: { response: Response, data: any }): Response => {\n    const {response, data} = error;\n    if (response && response.status) {\n        const errorText = data && (typeof data === 'object' ? Object.keys(data).length > 0 : true) ? data : (codeMessage[response.status] || response.statusText);\n        // const {status, url} = response;\n        console.log(errorText)\n        notification.error({\n            message: `操作失败`,\n            description: errorText,\n        });\n    } else if (!response) {\n        notification.error({\n            message: '网络异常',\n            description: '您的网络发生异常，无法连接服务器',\n        });\n    }\n    return response;\n};\n\n/**\n * 配置request请求时的默认参数\n */\nconst requestWithExtend = extend({\n    errorHandler, // 默认错误处理\n    // credentials: 'include', // 默认请求是否带上cookie\n    headers: {\n        'Content-Type': 'application/json;charset=utf-8',\n    },\n});\n\nexport const host = window.location.protocol + '//' + window.location.host\n// export const host = 'http://localhost:2638'\n\n/**\n * 封装一次request，使response可以统一校验后使用\n */\nconst request = async (url: string, option: any = {}) => {\n    let result = await requestWithExtend(host + url, {\n        getResponse: true,\n        ...option,\n        prefix: ''\n    });\n    return result.data;\n};\n\nexport default request;\n","import request, {host} from \"../utils/request\";\n\nexport interface InfoParamsType {\n    group: string;\n    kind: string;\n    version: string;\n}\n\nexport async function list(type: string = ''): Promise<any> {\n    return request('/resource/list', {params: {type}})\n}\n\nexport async function info(params: InfoParamsType): Promise<any> {\n    return request('/resource/info', {params})\n}\n\nexport async function tree(params: InfoParamsType): Promise<any> {\n    return request('/resource/tree', {params})\n}\n\nexport const uploadUrl = host + '/resource/upload'\n","import * as React from \"react\";\n\nexport const ArrayNode = '-'\n\nexport enum SourceType {\n    String = 'string',      // 字符串\n    Number = 'number',      // 数值\n    Boolean = 'boolean',    // 布尔\n    Object = 'object',      // 对象\n    Array = 'array',        // 数组\n}\n\nexport interface ND {\n    name: string\n    desc: string\n}\n\nexport interface TNode {\n    key: string,            // 全局唯一，格式为 index.path 如 pod.spec.containers.0.name\n    name: string,\n    title: React.ReactNode,\n    type: SourceType,\n    value: string,\n    children: TNode[],\n}\n","import React from \"react\";\nimport {Cascader} from 'antd';\nimport {list} from \"../api/resource\";\n\nclass KindList extends React.Component<any, any> {\n\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            options: [],\n            customOptions: [],\n        }\n        this.getOptions()\n    }\n\n    /**\n     * 生成原数据\n     * @param value\n     */\n    generateResource = (value: any) => {\n        if (value.length !== 3) return\n        if (this.props.generateResource)\n            this.props.generateResource(value[0], value[1], value[2])\n    }\n\n    getOptions = () => {\n        const that = this\n        list().then((result: any) => {\n            that.setState({options: result})\n        })\n        list('custom').then((result: any) => {\n            that.setState({customOptions: result})\n        })\n    }\n\n    render() {\n        return <div>\n            <Cascader\n                className=\"ml10\"\n                placeholder=\"Base Resource Select\"\n                options={this.state.options}\n                onChange={value => this.generateResource(value)}\n                changeOnSelect\n            /><br/>\n            <Cascader\n                className=\"ml10 mt5\"\n                placeholder=\"Custom Resource Select\"\n                options={this.state.customOptions}\n                onChange={value => this.generateResource(value)}\n                changeOnSelect\n            />\n        </div>\n    }\n}\n\nexport default KindList\n","import {TNode} from \"./base\";\nimport jsyaml from \"js-yaml\";\n\n/**\n * 根据path获取Object\n * @param obj\n * @param paths\n * @return any\n */\nexport function getObjByPath(obj: any, paths: string[]): any {\n    for (const v of paths) {\n        if (!obj.hasOwnProperty(v)) {\n            return null\n        }\n        obj = obj[v]\n    }\n    return obj\n}\n\n/**\n * 根据path更新Object\n * @param obj\n * @param paths\n * @param value\n * @return any\n */\nexport function updateObjByPath(obj: any, paths: string[], value: any): any {\n    const pl = paths.length\n    if (pl === 0) {\n        return obj\n    }\n    let newObj: any = Array.isArray(obj) ? [] : {}\n    let exist: boolean = pl > 1\n    for (const k in obj) {\n        if (!obj.hasOwnProperty(k)) {\n            continue\n        }\n        const v = obj[k]\n        if (paths[0] === k) {\n            if (pl === 1) {\n                exist = true\n                newObj[k] = value\n                continue\n            }\n            if (typeof v === 'object') {\n                newObj[k] = updateObjByPath(v, paths.slice(1), value)\n                continue\n            }\n        }\n        newObj[k] = v\n    }\n    if (!exist) {\n        newObj[paths[0]] = value\n    }\n    return newObj\n}\n\n/**\n * 首字母小写\n * @param str\n * @return string\n */\nexport function strToLowerCase(str: string): string {\n    return str.replace(str[0], str[0].toLowerCase())\n}\n\n/**\n * 生成随机字符串\n * @param length\n * @return string\n */\nexport function randomString(length: number): string {\n    const chars: string = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    let result = ''\n    for (let i = length; i > 0; --i) result += chars[Math.floor(Math.random() * chars.length)]\n    return result\n}\n\n/**\n * object根据key排序\n * @param obj\n */\nfunction sortObj(obj: any): any {\n    let newObj: any = {};\n    Object.keys(obj).sort().map((key: any) => newObj[key] = obj[key])\n    return newObj\n}\n\n/**\n * 对象深拷贝\n * @param obj\n */\nexport function deepClone(obj: any): any {\n    let o: any = {}\n    if (typeof obj != \"object\") return obj\n    if (obj === null) return null\n    if (obj instanceof Array) {\n        o = [];\n        for (let i = 0, len = obj.length; i < len; i++) {\n            o.push(deepClone(obj[i]))\n        }\n    } else {\n        for (let j in obj) {\n            if (!obj.hasOwnProperty(j)) continue\n            o[j] = deepClone(obj[j])\n        }\n    }\n    return o;\n}\n\n/**\n * 根据key获取树节点信息\n * @param key\n * @param nodes\n * @return TNode | null\n */\nexport function getTreeNodeByPath(key: string, nodes: any[]): any {\n    let node: any\n    for (const item of nodes) {\n        if (item.key === key) return item\n        node = getTreeNodeByPath(key, item.children)\n        if (node) return node\n    }\n    return node\n}\n\n/**\n * 根据key更新树节点信息\n * @param key\n * @param nodes\n * @param value\n * @return TNode[]\n */\nexport function updateTreeNodeByPath(key: string, nodes: TNode[], value: TNode | null): TNode[] {\n    let newNodes: TNode[] = []\n    for (const node of nodes) {\n        let newNode = {...node}\n        if (newNode.key === key) {\n            if (value) newNodes.push(value)\n            continue\n        }\n        newNode.children = updateTreeNodeByPath(key, newNode.children, value)\n        newNodes.push(newNode)\n    }\n    return newNodes\n}\n\n/**\n * obj转yaml\n * @param obj\n * @return string\n */\nexport function objToYaml(obj: any): string {\n    let str = ''\n    // 处理首次循环，获取类型拼接kind\n    for (const key in obj) {\n        if (!obj.hasOwnProperty(key)) continue\n        str += `---\\n`\n        str += jsyaml.safeDump(sortObj(obj[key]))\n    }\n    str += str !== '' ? '---' : ''\n    return str\n}\n\n/**\n * yaml转obj\n * @param str\n * @return any\n */\nexport function yamlToObjMulti(str: string): any {\n    let obj: any = {}\n    // maybe object or array\n    const arr = jsyaml.safeLoadAll(str)\n    for (const item of arr) {\n        if (!item) continue\n        // 处理kind\n        if (!item.hasOwnProperty('kind')) continue\n        const key = item.kind + '-' + randomString(6)\n        obj[key] = item\n    }\n    return obj\n}\n","import React from \"react\";\nimport {Button, Input, message, Popover, Select, Tree} from \"antd\";\nimport {MinusCircleOutlined, PlusCircleOutlined, PlusSquareOutlined} from '@ant-design/icons'\nimport KindList from \"./KindList\";\nimport {ArrayNode, ND, SourceType, TNode} from \"../base/base\";\nimport {\n    getTreeNodeByPath,\n    objToYaml,\n    randomString,\n    updateTreeNodeByPath, yamlToObjMulti,\n} from \"../base\";\nimport TextArea from \"antd/lib/input/TextArea\";\nimport {InfoParamsType, tree} from \"../api/resource\";\n\nclass CTree extends React.Component<any, any> {\n\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            kindRef: React.createRef(),\n            data: [],\n            expandedKeys: [],\n        }\n    }\n\n    /**\n     * 构建完整数据结构\n     * @param data 元数据\n     * @param prefix 额外添加的前缀\n     * @param cutPrefix 需要被替换的前缀\n     */\n    buildFullData = (data: any, prefix: string = '', cutPrefix: string = ''): any => {\n        if (prefix === '') prefix = randomString(6)\n        let result: any = {}\n        for (let k in data) {\n            if (!data.hasOwnProperty(k)) continue\n            result[k] = data[k]\n        }\n        result.children = []\n        result._children = []\n        let children = data.children\n        if (data._children && data._children.length > 0) children = data._children\n        for (let k in children) {\n            if (!children.hasOwnProperty(k)) continue\n            result._children.push(this.buildFullData(children[k], prefix, cutPrefix))\n        }\n        if (data.required && data.required.length > 0) {\n            for (let vv of data.children) {\n                if (data.required.indexOf(vv.name) === -1) continue\n                let child = this.buildFullData(vv, prefix, cutPrefix)\n                child.stats = {\n                    isRequired: true,\n                    isEdit: true,\n                }\n                // 设置默认字段不允许编辑\n                if (['root.apiVersion', 'root.kind'].indexOf(child.key) !== -1) child.stats.isEdit = false\n                result.children.push(child)\n            }\n        }\n\n        // 添加节点状态\n        if (!result.stats) result.stats = {\n            isRequired: false,\n            isEdit: true,\n        }\n        // 重构节点唯一key\n        if (cutPrefix !== '') {\n            result.key = result.key.replace(cutPrefix, prefix)\n        } else {\n            result.key = prefix + '.' + result.key\n        }\n        // 构建Base Element元素标题\n        switch (result.type) {\n            case 'array':\n                result.title = this.createAppendArrayNode(\n                    result.key,\n                    this.createMenuTitle(result.key, result)\n                )\n                break\n            case 'object': // 对象节点，object string/string\n                if (result._children.length === 0) {\n                    result.title = this.createAppendObjectNode(result.key, result)\n                } else {\n                    result.title = this.createMenuTitle(result.key, result)\n                }\n                break\n            case 'boolean':\n                const options: ND[] = [\n                    {name: 'true', desc: 'true'},\n                    {name: 'false', desc: 'false'},\n                ]\n                result.title = this.createPrefixNode(\n                    this.createMenuTitle(result.key, result),\n                    this.createSelectNode(result.key, options, result.value)\n                )\n                break\n            default:\n                // 构建Select Element元素标题\n                if (result.enums && result.enums.length > 0) {\n                    let options: ND[] = []\n                    for (const v of result.enums) {\n                        options.push({\n                            name: v,\n                            desc: v,\n                        })\n                    }\n                    result.title = this.createPrefixNode(\n                        this.createMenuTitle(result.key, result),\n                        this.createSelectNode(result.key, options, result.value)\n                    )\n                } else {\n                    result.title = this.createPrefixNode(\n                        this.createMenuTitle(result.key, result),\n                        this.createInputNode(result.key, result.value)\n                    )\n                }\n                break\n        }\n        return result\n    }\n\n    buildFullDataWithObj = (data: any, prefix: string = '', cutPrefix: string = '', obj: any = {}): any => {\n        if (prefix === '') prefix = randomString(6)\n        let result: any = {}\n        for (let k in data) {\n            if (!data.hasOwnProperty(k)) continue\n            result[k] = data[k]\n        }\n        result.children = []\n        result._children = []\n        let children = data.children\n        if (data._children && data._children.length > 0) children = data._children\n        for (let k in children) {\n            if (!children.hasOwnProperty(k)) continue\n            const v = children[k]\n            result._children.push(this.buildFullData(v, prefix, cutPrefix))\n\n            if (!obj || !obj.hasOwnProperty(v.name)) continue\n            result.children.push(this.buildFullDataWithObj(v, prefix, cutPrefix, obj[v.name]))\n        }\n\n        if (data.required && data.required.length > 0 && !obj) {\n            for (let vv of data.children) {\n                if (data.required.indexOf(vv.name) === -1) continue\n                let child = this.buildFullData(vv, prefix, cutPrefix)\n                child.stats = {\n                    isRequired: true,\n                    isEdit: true,\n                }\n                // 设置默认字段不允许编辑\n                if (['root.apiVersion', 'root.kind'].indexOf(child.key) !== -1) child.stats.isEdit = false\n                result.children.push(child)\n            }\n        }\n\n        // 添加节点状态\n        if (!result.stats) result.stats = {\n            isRequired: false,\n            isEdit: true,\n        }\n        // 重构节点唯一key\n        if (cutPrefix !== '') {\n            result.key = result.key.replace(cutPrefix, prefix)\n        } else {\n            result.key = prefix + '.' + result.key\n        }\n        // 构建Base Element元素标题\n        switch (result.type) {\n            case 'array':\n                result.title = this.createAppendArrayNode(\n                    result.key,\n                    this.createMenuTitle(result.key, result)\n                )\n                if (obj) {\n                    for (const k in obj) {\n                        if (!obj.hasOwnProperty(k)) continue\n                        // 默认构建普通数组节点\n                        const tNode = this.buildFullDataWithObj(\n                            result._children[0],\n                            result.key + '.' + k,\n                            result.key,\n                            obj[k]\n                        )\n                        result.children.push(tNode)\n                    }\n                }\n                break\n            case 'object': // 对象节点，object string/string\n                if (result._children.length > 0) {\n                    result.title = this.createMenuTitle(result.key, result)\n                    break\n                }\n                result.title = this.createAppendObjectNode(result.key, result)\n                if (obj) {\n                    for (const k in obj) {\n                        if (!obj.hasOwnProperty(k)) continue\n                        const key = result.key + '.' + randomString(6)\n                        result.children.push({\n                            key,\n                            name: k,\n                            title: this.createKVInputNode(key, k, obj[k]),\n                            type: SourceType.String,\n                            value: obj[k],\n                            children: [],\n                        })\n                    }\n                }\n                break\n            case 'boolean':\n                result.value = obj ? obj : result.value\n                const options: ND[] = [\n                    {name: 'false', desc: 'false'},\n                    {name: 'true', desc: 'true'},\n                ]\n                result.title = this.createPrefixNode(\n                    this.createMenuTitle(result.key, result),\n                    this.createSelectNode(result.key, options, result.value)\n                )\n                break\n            default:\n                result.value = obj ? obj : result.value\n                // 构建Select Element元素标题\n                if (result.enums && result.enums.length > 0) {\n                    let options: ND[] = []\n                    for (const v of result.enums) {\n                        options.push({\n                            name: v,\n                            desc: v,\n                        })\n                    }\n                    result.title = this.createPrefixNode(\n                        this.createMenuTitle(result.key, result),\n                        this.createSelectNode(result.key, options, result.value)\n                    )\n                } else {\n                    result.title = this.createPrefixNode(\n                        this.createMenuTitle(result.key, result),\n                        this.createInputNode(result.key, result.value)\n                    )\n                }\n                break\n        }\n        return result\n    }\n\n    /**\n     * 生成Yaml字符串\n     */\n    convertToYaml = () => {\n        if (this.props.buildYamlData) {\n            let data: any[] = []\n            for (const v of this.state.data) {\n                const item = this.parseTreeToObj([v])\n                data.push(item)\n            }\n            const yamlData = objToYaml(data)\n            this.props.buildYamlData(yamlData)\n        }\n    }\n\n    /**\n     * yaml生成树结构\n     * @param code\n     */\n    convertToTreeData = (code: string) => {\n        let obj: any\n        try {\n            obj = yamlToObjMulti(code)\n        } catch (e) {\n            message.error('Yaml格式错误')\n            return\n        }\n        const that = this\n        for (const k in obj) {\n            if (!obj.hasOwnProperty(k)) continue\n            const v = obj[k]\n            const apiVersion = v.apiVersion\n            const kind = v.kind\n            const versionData = apiVersion.split('/')\n            if (versionData.length === 1) versionData.unshift('core')\n            const params: InfoParamsType = {\n                kind,\n                group: versionData[0],\n                version: versionData[1],\n            }\n            tree(params).then(function (result: any) {\n                if (!result) return\n                const fullData = that.buildFullDataWithObj(result, '', '', v)\n                const data = [...that.state.data, fullData]\n                that.setState({data, expandedKeys: that.getExpandedKeys(data)})\n            }).catch(function (reason) {\n                console.log(reason)\n            })\n        }\n    }\n\n    /**\n     * 获取kind对应的渲染数据，并向数据集中增加一组\n     * @param group\n     * @param kind\n     * @param version\n     */\n    generateResource = (group: string, kind: string, version: string) => {\n        const that = this\n        const params: InfoParamsType = {group, kind, version}\n        tree(params).then(function (result: any) {\n            if (!result) return\n            const fullData = that.buildFullData(result)\n            const data = [...that.state.data, fullData]\n            that.setState({data, expandedKeys: that.getExpandedKeys(data)})\n        })\n    }\n\n    /**\n     * tree转obj\n     * @param nodes\n     * @return any\n     */\n    parseTreeToObj = (nodes: any[]): any => {\n        let obj: any = {}\n        for (const v of nodes) {\n            switch (v.type) {\n                case SourceType.Object:\n                    obj[v.name] = this.parseTreeToObj(v.children)\n                    if (v.name === 'root') obj = obj[v.name]\n                    break\n                case SourceType.Array:\n                    let arr = []\n                    for (const va of v.children) {\n                        if (va.type === SourceType.Object) {\n                            if (va.children.length > 0) arr.push(this.parseTreeToObj(va.children))\n                        } else {\n                            if (va.value !== '') arr.push(va.value)\n                        }\n                    }\n                    obj[v.name] = arr\n                    break\n                default:\n                    if (v.name !== '') obj[v.name] = v.value\n                    break\n            }\n        }\n        return obj\n    }\n\n    /**\n     * 添加select节点\n     * @param selectData\n     * @param path\n     * @param value\n     * @return React.ReactNode\n     */\n    createSelectNode = (path: string, selectData: ND[], value: string = '') => {\n        let optionData = []\n        for (const v of selectData) {\n            optionData.push({\n                label: v.name,\n                value: JSON.stringify({value: v.name, path})\n            })\n        }\n        const defaultValue = JSON.stringify({\n            value: value === '' ? selectData[0].name : value,\n            path\n        })\n        return <Select\n            defaultValue={defaultValue}\n            className=\"selectStyle\"\n            onChange={this.changeSelectValue}\n            key={path + randomString(3)}\n            options={optionData}\n        />\n    }\n\n    /**\n     * 添加input文本节点\n     * @param path\n     * @param value\n     * @return React.ReactNode\n     */\n    createInputNode = (path: string, value: string = '') => {\n        return <TextArea\n            style={{height: '35px', minHeight: '35px'}}\n            data-path={path}\n            onChange={this.changeInputValue}\n            defaultValue={value}\n        />\n    }\n\n    /**\n     * 添加K/V input文本节点\n     * @param path\n     * @param name\n     * @param value\n     * @return React.ReactNode\n     */\n    createKVInputNode = (path: string, name: string = '', value: string = '') => {\n        return this.createPrefixNode(<Input\n            data-path={path}\n            style={{width: '150px', height: '80%'}}\n            onChange={e => this.changeInputValue(e, false)}\n            defaultValue={name}\n        />, this.createDeleteNode(path, this.createInputNode(path, value)))\n    }\n\n    /**\n     * 添加数组input文本节点\n     * @param path\n     */\n    createArrInputNode = (path: string) => this.createPrefixNode(ArrayNode, this.createDeleteNode(path, this.createInputNode(path)))\n\n    /**\n     * 创建移除节点按钮\n     * @param path\n     * @param node\n     */\n    createDeleteNode = (path: string, node: React.ReactNode) => {\n        return (<>\n            <span className=\"floatLeft\">{node}</span>\n            <span className=\"floatLeft\">\n                <Button\n                    data-path={path}\n                    type='link'\n                    icon={<MinusCircleOutlined/>}\n                    danger\n                    onClick={this.removeObjItem}\n                />\n            </span>\n        </>)\n    }\n\n    /**\n     * 添加数组按钮节点\n     * @param path\n     * @param node\n     * @return React.ReactNode\n     */\n    createAppendArrayNode = (path: string, node: React.ReactNode) => {\n        return (\n            <div className=\"flex\">\n                <span className=\"f1\">{node}</span>\n                <Button\n                    className=\"f1\"\n                    data-path={path}\n                    type=\"link\"\n                    icon={<PlusCircleOutlined/>}\n                    style={{marginTop: '-4px'}}\n                    onClick={this.addArrItem}\n                />\n            </div>\n        )\n    }\n\n    /**\n     * 添加对象按钮节点\n     * @param path\n     * @param source\n     * @return React.ReactNode\n     */\n    createAppendObjectNode = (path: string, source: any) => {\n        return (\n            <div className=\"flex\">\n                <span className=\"f1\">{this.createMenuTitle(path, source)}</span>\n                <Button\n                    className=\"f1\"\n                    data-path={path}\n                    type=\"link\"\n                    icon={<PlusSquareOutlined/>}\n                    style={{marginTop: '-4px'}}\n                    onClick={this.addObjItem}\n                />\n            </div>\n        )\n    }\n\n    /**\n     * 创建节点前缀\n     * @param name\n     * @param node\n     * @return React.ReactNode\n     */\n    createPrefixNode = (name: React.ReactNode, node: React.ReactNode) => {\n        return (\n            <span className=\"ant-input-wrapper ant-input-group\">\n                <span className=\"ant-input-group-addon\"> {name} </span>\n                <span> {node} </span>\n            </span>\n        )\n    }\n\n    /**\n     * 构建标题\n     * @param title\n     * @param tipContent\n     * @param key\n     * @return React.ReactNode\n     */\n    createTitle = (title: React.ReactNode, tipContent: string, key: number = 0) => {\n        if (tipContent === '') return title\n        return <Popover\n            content={tipContent}\n            trigger=\"hover\"\n            arrowPointAtCenter\n            key={key}\n        > {title} </Popover>\n    }\n\n    // 构建移除菜单\n    createDeleteMenu = (path: string, isArray: boolean = false) => {\n        return <Button\n            key=\"del\"\n            data-path={path}\n            className=\"ml2\"\n            type=\"primary\"\n            onClick={isArray ? this.removeObjItem : this.removeItem}\n\n            style={{margin: '5px'}}\n            danger\n        > delete </Button>\n    }\n\n    /**\n     * 构建子项菜单\n     * @param path 节点唯一路径标识\n     * @param source 该节点数据集\n     * @param childs 该节点当前渲染的子节点集合\n     * @return React.ReactNode\n     */\n    createMenuTitle = (path: string, source: any, childs: string[] = []) => {\n        // 获取未渲染的子项\n        let desc = ''\n        if (source.descs && source.descs.length > 0) desc = source.descs[0].desc\n        let notExistChildren = []\n        for (const item of source.children) childs.push(item.name)\n        for (const item of source._children) if (childs.indexOf(item.name) === -1) notExistChildren.push(item)\n        // 如果子项都渲染过并且为required节点， 则直接返回\n        if (notExistChildren.length === 0 && source.stats.isRequired) return this.createTitle(source.name, desc)\n        // 渲染不存在子项选择\n        let set = notExistChildren.map((child, index) => {\n            // TODO 支持根据zh/en自动识别渲染\n            let desc = ''\n            if (child.descs && child.descs.length > 0) desc = child.descs[0].desc\n            return this.createTitle(<Button\n                data-path={path}\n                data-name={child.name}\n                className=\"ml2\"\n                type=\"primary\"\n                key={index}\n                onClick={this.addItemFromMenu}\n                style={{margin: '5px'}}\n            > {child.name} </Button>, desc, index)\n        })\n        // 不是required节点或者数组节点，构建基础菜单\n        if (!source.stats.isRequired) set.unshift(this.createDeleteMenu(path, source.type === 'array'))\n        if (source.type === 'array') set = [this.createDeleteMenu(path, source.type === 'array')]\n        return this.createTitle(<Popover\n            trigger=\"click\"\n            content={<div style={{maxWidth: '500px'}}>{set}</div>}\n            arrowPointAtCenter\n        > {source.name} </Popover>, desc)\n    }\n\n    /**\n     * 同步菜单项\n     * @param path\n     * @param addSet  需要添加的子项菜单名\n     * @param delSet  需要移除的子项菜单名\n     */\n    syncItemMenu = (path: string, addSet: string[] = [], delSet: string[] = []) => {\n        // 获取选中节点\n        const node = getTreeNodeByPath(path, this.state.data)\n        if (!node) return\n        let expandedKeys = this.state.expandedKeys\n\n        // 添加或移除子项\n        const children = [...node.children]\n        for (const s of node._children) {\n            if (delSet.indexOf(s.name) > -1) {\n                let delStatus = true\n                for (const c of children) {\n                    if (c.name === s.name) {\n                        delStatus = false\n                        break\n                    }\n                }\n                if (delStatus) {\n                    children.push(s)\n                    if (expandedKeys.indexOf(s.key) === -1) expandedKeys.push(s.key)\n                }\n            }\n            if (addSet.indexOf(s.name) > -1) {\n                let addIndex = -1\n                for (const ck in children) {\n                    if (children[ck].name === s.name) {\n                        addIndex = parseInt(ck)\n                        break\n                    }\n                }\n                children.splice(addIndex, 1)\n            }\n        }\n        let cs = []\n        for (const v of children) cs.push(v.name)\n        node.title = this.createMenuTitle(path, node, cs)\n        node.children = children\n        if (expandedKeys.indexOf(node.key) === -1) expandedKeys.push(node.key)\n        // 更新选中节点\n        const data = updateTreeNodeByPath(path, this.state.data, node)\n        this.setState({data, expandedKeys})\n    }\n\n    addItemFromMenu = (e: any) => {\n        const path = e.currentTarget.getAttribute('data-path')\n        const name = e.currentTarget.getAttribute('data-name')\n        this.syncItemMenu(path, [], [name])\n    }\n\n    /**\n     * 添加arr节点子项\n     * @param e\n     */\n    addArrItem = (e: any) => {\n        const path = e.currentTarget.getAttribute('data-path')\n        // 根据path获取到tree的数组节点\n        const node = getTreeNodeByPath(path, this.state.data)\n        if (!node || node._children.length === 0) return\n        // 获取实际渲染数组节点数量\n        const nodeChildNum = node.children.length\n        // 默认构建普通数组节点\n        const keyPath = path + '.' + nodeChildNum\n        let tNode = {...node._children[0]}\n        tNode.key = nodeChildNum\n        // 数组节点添加需要重新构造添加后的所有子项key\n        let expandedKeys = this.state.expandedKeys\n        if (tNode.type === 'object') {\n            tNode = this.buildFullData(node._children[0], keyPath, path)\n            if (expandedKeys.indexOf(node.key) === -1) expandedKeys.push(node.key)\n            if (expandedKeys.indexOf(tNode.key) === -1) expandedKeys.push(tNode.key)\n        }\n        node.children.push(tNode)\n        // 根据path更新tree\n        const data = updateTreeNodeByPath(path, this.state.data, node)\n        this.setState({data, expandedKeys})\n    }\n\n    /**\n     * 添加obj节点子项\n     * @param e\n     */\n    addObjItem = (e: any) => {\n        const path = e.currentTarget.getAttribute('data-path')\n        // 根据path获取tree节点信息\n        const node = getTreeNodeByPath(path, this.state.data)\n        if (!node) return\n        const key = path + '.' + randomString(6)\n        const tNode = {\n            key,\n            name: '',\n            title: this.createKVInputNode(key),\n            type: SourceType.String,\n            value: '',\n            children: [],\n        }\n        let expandedKeys = this.state.expandedKeys\n        if (expandedKeys.indexOf(path) === -1) expandedKeys.push(path)\n        node.children.push(tNode)\n        const data = updateTreeNodeByPath(path, this.state.data, node)\n        this.setState({data, expandedKeys})\n    }\n\n    /**\n     * 移除节点数组/KV子项\n     * @param e\n     */\n    removeObjItem = (e: any) => {\n        const path = e.currentTarget.getAttribute('data-path')\n        const node = getTreeNodeByPath(path, this.state.data)\n        if (!node) return\n        let data = updateTreeNodeByPath(path, this.state.data, null)\n        this.setState({data})\n    }\n\n    /**\n     * 移除节点子项\n     * @param e\n     */\n    removeItem = (e: any) => {\n        const path = e.currentTarget.getAttribute('data-path')\n        const node = getTreeNodeByPath(path, this.state.data)\n        if (!node) return\n        let data = updateTreeNodeByPath(path, this.state.data, null)\n        this.setState({data})\n        // 存在父节点，更新menu\n        const pathArr = path.split('.')\n        const pathLen = pathArr.length\n        if (pathLen === 1) return\n        const parentPath = pathArr.slice(0, pathLen - 1).join('.')\n        this.syncItemMenu(parentPath, [node.name])\n    }\n\n    /**\n     * 修改select内容\n     * @param val\n     */\n    changeSelectValue = (val: string) => {\n        const valObj = JSON.parse(val)\n        const node = getTreeNodeByPath(valObj.path, this.state.data)\n        if (!node) return\n        node.value = valObj.value\n        const data = updateTreeNodeByPath(valObj.path, this.state.data, node)\n        this.setState({data})\n    }\n\n    /**\n     * 修改input内容\n     * @param e\n     * @param isVal\n     */\n    changeInputValue = (e: any, isVal: boolean = true) => {\n        const path = e.currentTarget.getAttribute('data-path')\n        const value = e.currentTarget.value\n        const node = getTreeNodeByPath(path, this.state.data)\n        if (!node) return\n        isVal ? node.value = value : node.name = value\n        const data = updateTreeNodeByPath(path, this.state.data, node)\n        this.setState({data})\n    }\n\n    /**\n     * 选中树节点\n     * @param selectedKeys\n     * @param e {selected: bool, selectedNodes, node, event}\n     */\n    onSelect = (selectedKeys: any, e: any) => {\n        console.log('onSelect: ', selectedKeys)\n    }\n\n    /**\n     * 展开节点\n     * @param expandedKeys\n     * @param e {expanded: bool, node: TNode}\n     */\n    onExpand = (expandedKeys: any, e: any) => {\n        const currentKey = e.node.key\n        let currentExpandedKeys = []\n        for (const key of expandedKeys) {\n            if (key.indexOf(currentKey) !== -1 && key !== currentKey) continue\n            currentExpandedKeys.push(key)\n        }\n        this.setState({expandedKeys: currentExpandedKeys})\n    }\n\n    /**\n     * 根据树数据获取全部节点key\n     * @param nodes\n     */\n    getExpandedKeys = (nodes: TNode[]) => {\n        let expandedKeys: string[] = []\n        for (const node of nodes) expandedKeys.push(node.key, ...this.getExpandedKeys(node.children))\n        return expandedKeys\n    }\n\n    /**\n     * 折叠所有节点\n     */\n    foldAll = () => this.setState({expandedKeys: []})\n\n    /**\n     * 展开所有节点\n     */\n    unfoldAll = () => this.setState({expandedKeys: this.getExpandedKeys(this.state.data)})\n\n    render() {\n        return (\n            <div className={this.props.className}>\n                <KindList\n                    ref={this.state.kindRef}\n                    generateResource={this.generateResource}\n                />\n                <Tree\n                    className=\"treeStyle\"\n                    onSelect={this.onSelect}\n                    onExpand={this.onExpand}\n                    showLine={true}\n                    treeData={this.state.data}\n                    expandedKeys={this.state.expandedKeys}\n                />\n            </div>\n        )\n    }\n}\n\nexport default CTree\n","import React from \"react\";\nimport {message, Affix, Button, Popover, Drawer, Upload} from \"antd\";\nimport {\n    PlusSquareOutlined,\n    MinusSquareOutlined,\n    CopyOutlined,\n    DownloadOutlined,\n    DoubleLeftOutlined,\n    DoubleRightOutlined,\n    SettingOutlined,\n    UploadOutlined\n} from '@ant-design/icons'\nimport './index.css'\nimport {randomString} from \"../base\";\nimport {uploadUrl} from \"../api/resource\";\n\nconst props = {\n    name: 'file',\n    action: uploadUrl,\n    showUploadList: false,\n    maxCount: 1,\n    onChange(info: any) {\n        if (info.file.status === 'done') {\n            message.success(`${info.file.name} file uploaded successfully`);\n        } else if (info.file.status === 'error') {\n            message.error(`${info.file.name} file upload failed.`);\n        }\n    },\n};\n\nclass NavBar extends React.Component<any, any> {\n\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            top: 0,\n            configVisible: false,\n        }\n    }\n\n    /**\n     * 折叠\n     */\n    fold = () => {\n        if (this.props.fold) this.props.fold()\n    }\n\n    /**\n     * 展开\n     */\n    unfold = () => {\n        if (this.props.unfold) this.props.unfold()\n    }\n\n    /**\n     * 构建树结构\n     */\n    build = () => {\n        if (this.props.buildData) this.props.buildData()\n    }\n\n    /**\n     * 解析为yaml\n     */\n    parse = () => {\n        if (this.props.parseData) this.props.parseData()\n    }\n\n    /**\n     * 复制\n     */\n    copyData = () => {\n        let text = document.createElement(\"textarea\");    // 直接构建textarea\n        text.value = this.props.data                               // 设置内容\n        document.body.appendChild(text);                           // 添加临时实例\n        text.select();                                             // 选择实例内容\n        document.execCommand(\"Copy\");                  // 执行复制\n        document.body.removeChild(text);                           // 删除临时实例\n    }\n\n    /**\n     * 下载\n     */\n    downloadData = () => {\n        if (!this.props.data) {\n            message.error('无内容可下载')\n            return\n        }\n        const element = document.createElement('a');\n        element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(this.props.data));\n        const filename = randomString(6) + '.yml'\n        element.setAttribute('download', filename);\n        element.style.display = 'none';\n        document.body.appendChild(element);\n        element.click();\n        document.body.removeChild(element);\n    }\n\n    /**\n     * 打开配置\n     */\n    configOpen = () => this.setState({configVisible: true})\n\n    /**\n     * 关闭配置\n     */\n    configClose = () => this.setState({configVisible: false})\n\n    render() {\n        return (<>\n            <Affix offsetTop={this.state.top}>\n                <div className=\"navBar\">\n                    <Popover trigger=\"hover\" content=\"设置\">\n                        <Button className=\"ml2\" type=\"primary\" onClick={this.configOpen}>\n                            <SettingOutlined/>\n                        </Button>\n                    </Popover>\n                    <Popover trigger=\"hover\" content=\"折叠全部\">\n                        <Button className=\"ml2\" type=\"primary\" onClick={this.fold}>\n                            <PlusSquareOutlined/>\n                        </Button>\n                    </Popover>\n                    <Popover trigger=\"hover\" content=\"展开全部\">\n                        <Button className=\"ml2\" type=\"primary\" onClick={this.unfold}>\n                            <MinusSquareOutlined/>\n                        </Button>\n                    </Popover>\n                    <Popover trigger=\"hover\" content=\"解析\">\n                        <Button className=\"ml2\" type=\"primary\" onClick={this.parse}>\n                            <DoubleLeftOutlined/>\n                        </Button>\n                    </Popover>\n                    <Popover trigger=\"hover\" content=\"构建\">\n                        <Button className=\"ml2\" type=\"primary\" onClick={this.build}>\n                            <DoubleRightOutlined/>\n                        </Button>\n                    </Popover>\n                    <Popover trigger=\"hover\" content=\"复制\">\n                        <Button className=\"ml2\" type=\"primary\" onClick={this.copyData}>\n                            <CopyOutlined/>\n                        </Button>\n                    </Popover>\n                    <Popover trigger=\"hover\" content=\"下载\">\n                        <Button className=\"ml2\" type=\"primary\" onClick={this.downloadData}>\n                            <DownloadOutlined/>\n                        </Button>\n                    </Popover>\n                    <Popover trigger=\"hover\" content=\"上传资源\">\n                        <Upload className=\"ml2 inline\" {...props}>\n                            <Button type=\"primary\">\n                                <UploadOutlined/>\n                            </Button>\n                        </Upload>\n                    </Popover>\n                </div>\n            </Affix>\n            <Drawer\n                title=\"高级设置\"\n                placement=\"left\"\n                closable={false}\n                visible={this.state.configVisible}\n                onClose={this.configClose}\n            >\n                <p>敬请期待</p>\n            </Drawer>\n        </>);\n    }\n}\n\nexport default NavBar\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport CTree from \"./components/CTree\";\nimport {UnControlled as CodeMirror} from \"react-codemirror2\";\nimport NavBar from \"./components/NavBar\";\n\nrequire('codemirror/mode/yaml/yaml')\n\nexport default class App extends React.Component<any, any> {\n\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            navBarRef: React.createRef(),\n            cTreeRef: React.createRef(),\n            defaultData: '',\n            codeData: '',\n        }\n    }\n\n    /**\n     * 构建code内容\n     * @param data\n     */\n    buildCodeData = (data: string) => this.setState({defaultData: data})\n\n    render() {\n        return (\n            <div className=\"App\">\n                <NavBar\n                    ref={this.state.navBarRef}\n                    data={this.state.codeData}\n                    fold={() => this.state.cTreeRef.current.foldAll()}\n                    unfold={() => this.state.cTreeRef.current.unfoldAll()}\n                    buildData={() => this.state.cTreeRef.current.convertToYaml()}\n                    parseData={() => {this.state.cTreeRef.current.convertToTreeData(this.state.codeData)}}\n                />\n                <div className=\"flex\">\n                    <CTree\n                        className=\"trees\"\n                        ref={this.state.cTreeRef}\n                        buildYamlData={this.buildCodeData}\n                    />\n                    <CodeMirror\n                        className=\"codes\"\n                        value={this.state.defaultData}\n                        options={{\n                            mode: 'yaml',\n                            theme: 'material',\n                            lineNumbers: true\n                        }}\n                        editorDidMount={(editor) => {\n                            editor.setSize('auto', 500)\n                        }}\n                        onChange={(editor, data, value) => {\n                            this.setState({codeData: value})\n                        }}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}