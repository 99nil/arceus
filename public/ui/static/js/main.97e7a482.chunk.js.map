{"version":3,"sources":["serviceWorker.ts","utils/request.ts","api/resource.ts","base/base.ts","components/KindList.tsx","base/index.ts","components/CTree.tsx","components/NavBar.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","codeMessage","200","201","202","204","400","401","403","404","406","410","422","500","502","503","504","requestWithExtend","extend","errorHandler","error","response","data","status","errorText","Object","keys","length","statusText","console","log","notification","message","description","headers","host","protocol","request","url","a","option","getResponse","prefix","result","tree","params","SourceType","KindList","props","generateResource","value","getOptions","that","list","then","setState","options","state","className","this","onChange","changeOnSelect","React","Component","randomString","chars","i","Math","floor","random","sortObj","obj","newObj","sort","map","key","getTreeNodeByPath","nodes","node","item","children","updateTreeNodeByPath","newNodes","newNode","push","CTree","buildFullData","cutPrefix","k","hasOwnProperty","_children","required","vv","indexOf","name","child","stats","isRequired","isEdit","replace","type","title","createAppendArrayNode","createMenuTitle","createAppendObjectNode","desc","createPrefixNode","createSelectNode","enums","v","createInputNode","buildFullDataWithObj","tNode","createKVInputNode","String","convertToYaml","buildYamlData","parseTreeToObj","yamlData","str","jsyaml","safeDump","objToYaml","convertToTreeData","code","arr","safeLoadAll","kind","yamlToObjMulti","e","apiVersion","versionData","split","unshift","group","version","fullData","expandedKeys","getExpandedKeys","catch","reason","Array","va","createTextNode","path","source","data-path","changeInputValue","defaultValue","selectData","optionData","label","JSON","stringify","changeSelectValue","style","width","height","createDeleteNode","createArrInputNode","icon","MinusCircleOutlined","danger","onClick","removeObjItem","PlusCircleOutlined","marginTop","addArrItem","PlusSquareOutlined","addObjItem","createTitle","tipContent","content","trigger","arrowPointAtCenter","createDeleteMenu","isArray","removeItem","margin","childs","descs","notExistChildren","set","index","data-name","addItemFromMenu","maxWidth","syncItemMenu","addSet","delSet","s","delStatus","c","addIndex","ck","parseInt","splice","cs","target","getAttribute","currentTarget","nodeChildNum","keyPath","pathArr","pathLen","parentPath","slice","join","val","valObj","parse","isVal","onSelect","selectedKeys","onExpand","currentKey","currentExpandedKeys","foldAll","unfoldAll","kindRef","createRef","ref","showLine","treeData","NavBar","fold","unfold","build","buildData","parseData","copyData","text","document","createElement","body","appendChild","select","execCommand","removeChild","downloadData","element","setAttribute","encodeURIComponent","filename","display","click","configOpen","configVisible","configClose","top","offsetTop","MinusSquareOutlined","DoubleLeftOutlined","DoubleRightOutlined","CopyOutlined","DownloadOutlined","SettingOutlined","placement","closable","visible","onClose","require","App","buildCodeData","defaultData","navBarRef","cTreeRef","codeData","current","mode","theme","lineNumbers","editorDidMount","editor","setSize","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.97e7a482.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","/**\n * request 网络请求工具\n * 更详细的 api 文档: https://github.com/umijs/umi-request\n */\nimport {extend} from 'umi-request';\nimport {notification} from 'antd';\n\nconst codeMessage: { [code: number]: string } = {\n    200: '服务器成功返回请求的数据。',\n    201: '新建或修改数据成功。',\n    202: '一个请求已经进入后台排队（异步任务）。',\n    204: '删除数据成功。',\n    400: '发出的请求有错误，服务器没有进行新建或修改数据的操作。',\n    401: '用户没有权限（令牌、用户名、密码错误）。',\n    403: '用户得到授权，但是访问是被禁止的。',\n    404: '发出的请求针对的是不存在的记录，服务器没有进行操作。',\n    406: '请求的格式不可得。',\n    410: '请求的资源被永久删除，且不会再得到的。',\n    422: '当创建一个对象时，发生一个验证错误。',\n    500: '服务器发生错误，请检查服务器。',\n    502: '网关错误。',\n    503: '服务不可用，服务器暂时过载或维护。',\n    504: '网关超时。',\n};\n\n/**\n * 异常处理程序\n */\nconst errorHandler = (error: { response: Response, data: any }): Response => {\n    const {response, data} = error;\n    if (response && response.status) {\n        const errorText = data && (typeof data === 'object' ? Object.keys(data).length > 0 : true) ? data : (codeMessage[response.status] || response.statusText);\n        // const {status, url} = response;\n        console.log(errorText)\n        notification.error({\n            message: `操作失败`,\n            description: errorText,\n        });\n    } else if (!response) {\n        notification.error({\n            message: '网络异常',\n            description: '您的网络发生异常，无法连接服务器',\n        });\n    }\n    return response;\n};\n\n/**\n * 配置request请求时的默认参数\n */\nconst requestWithExtend = extend({\n    errorHandler, // 默认错误处理\n    // credentials: 'include', // 默认请求是否带上cookie\n    headers: {\n        'Content-Type': 'application/json;charset=utf-8',\n    },\n});\n\nconst host = window.location.protocol + '//' + window.location.host\n// const host = 'http://localhost:2638'\n\n/**\n * 封装一次request，使response可以统一校验后使用\n */\nconst request = async (url: string, option: any = {}) => {\n    let result = await requestWithExtend(host + url, {\n        getResponse: true,\n        ...option,\n        prefix: ''\n    });\n    return result.data;\n};\n\nexport default request;\n","import request from \"../utils/request\";\n\nexport interface InfoParamsType {\n    group: string;\n    kind: string;\n    version: string;\n}\n\nexport async function list(): Promise<any> {\n    return request('/resource/list')\n}\n\nexport async function info(params: InfoParamsType): Promise<any> {\n    return request('/resource/info', {params})\n}\n\nexport async function tree(params: InfoParamsType): Promise<any> {\n    return request('/resource/tree', {params})\n}\n","import * as React from \"react\";\n\nexport const ArrayNode = '-'\n\nexport enum SourceType {\n    String = 'string',      // 字符串\n    Number = 'number',      // 数值\n    Boolean = 'boolean',    // 布尔\n    Object = 'object',      // 对象\n    Array = 'array',        // 数组\n}\n\nexport interface KV {\n    key: string\n    value: string\n}\n\nexport interface ND {\n    name: string\n    desc: string\n}\n\nexport interface WithNV {\n    name: string\n    value: string\n}\n\n/*\n    默认类型为string，当items存在时默认为Object\n    指定类型为array时，当items存在时为arrayObject\n */\nexport interface Source {\n    name: string            // 名称\n    title: string           // 标题\n    desc: string            // 描述\n    value?: string          // 默认值\n    with?: WithNV           // 关联项，默认顶级查找spec.type\n    selects?: ND[]          // 选择项，第一个为默认\n    checked?: ND[]          // 判断项，第一个为默认\n    must?: boolean          // 是否必须存在，默认false\n    type?: SourceType       // 值类型，默认string\n    arrayType?: SourceType  // 数组子项类型\n    items?: Source[]        // 子项\n}\n\nexport interface SourceNode {\n    name: string            // 名称\n    title: string           // 标题\n    desc: string            // 描述\n    value: string           // 默认值\n    must: boolean           // 是否必须存在，默认false\n    type: SourceType        // 值类型，默认string\n    selects: ND[]           // 选择项，第一个为默认\n    checked: ND[]           // 判断项，第一个为默认\n    items: SourceNode[]     // 子项\n    with?: WithNV           // 关联项，默认顶级查找spec.type\n}\n\nexport interface TNode {\n    key: string,            // 全局唯一，格式为 index.path 如 pod.spec.containers.0.name\n    name: string,\n    title: React.ReactNode,\n    type: SourceType,\n    value: string,\n    children: TNode[],\n}\n","import React from \"react\";\nimport {Cascader} from 'antd';\nimport {list} from \"../api/resource\";\n\nclass KindList extends React.Component<any, any> {\n\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            options: [],\n        }\n        this.getOptions()\n    }\n\n    /**\n     * 生成原数据\n     * @param value\n     */\n    generateResource = (value: any) => {\n        if (value.length !== 3) return\n        if (this.props.generateResource)\n            this.props.generateResource(value[0], value[1], value[2])\n    }\n\n    getOptions = () => {\n        const that = this\n        list().then(function (result) {\n            that.setState({options: result})\n        })\n    }\n\n    render() {\n        return <Cascader\n            className=\"ml10\"\n            options={this.state.options}\n            onChange={value => this.generateResource(value)}\n            changeOnSelect\n        />\n    }\n}\n\nexport default KindList\n","import {ArrayNode, Source, SourceNode, SourceType, TNode} from \"./base\";\nimport jsyaml from \"js-yaml\";\n\n/**\n * 节点数据转object\n * @param nodes\n * @return any\n */\nexport function parseNodesToObj(nodes: SourceNode[]): any {\n    let obj: any = {}\n    for (const v of nodes) {\n        switch (v.type) {\n            case SourceType.Object:\n                obj[v.name] = parseNodesToObj(v.items)\n                break\n            case SourceType.Array:\n                obj[v.name] = []\n                break\n            default:\n                obj[v.name] = v.value\n                break\n        }\n    }\n    return obj\n}\n\n/**\n * 根据初始结构集补全初始结构集缺失数据\n * @param sources\n * @return BaseStruct[]\n */\nexport function sourceToNodeSet(sources: Source[]): SourceNode[] {\n    let full: SourceNode[] = []\n    for (const v of sources) {\n        v.items = v.items || []\n        if (v.items.length > 0 && !v.type) {\n            v.type = SourceType.Object\n        }\n        full.push({\n            name: v.name,\n            title: v.title,\n            desc: v.desc,\n            value: v.value || '',\n            must: v.must || false,\n            type: v.type || SourceType.String,\n            selects: v.selects || [],\n            checked: v.checked || [],\n            items: sourceToNodeSet(v.items),\n        })\n    }\n    return full\n}\n\n/**\n * 根据初始结构补全初始结构缺失数据\n * @param source\n * @return SourceNode\n */\nexport function sourceToNode(source: Source): SourceNode {\n    return {\n        name: source.name,\n        title: source.title,\n        desc: source.desc,\n        value: source.value || '',\n        must: source.must || false,\n        type: source.type || SourceType.String,\n        selects: source.selects || [],\n        checked: source.checked || [],\n        items: sourceToNodeSet(source.items || []),\n    }\n}\n\n/**\n * 根据节点路径获取节点信息\n * @param path\n * @param nodes\n * @return SourceNode | null\n */\nexport function getNodeByPath(path: string, nodes: SourceNode[]): SourceNode | null {\n    const paths = path.split('.')\n    let node: SourceNode | null = null\n    for (const v of paths) {\n        // 过滤数组key，非数字会返回NaN\n        if (parseFloat(v) >= 0) continue\n        node = null\n        for (const item of nodes) {\n            if (item.name === v) {\n                node = item\n                break\n            }\n        }\n        if (!node) break\n        nodes = node.items\n    }\n    return node\n}\n\n/**\n * 根据path获取Object\n * @param obj\n * @param paths\n * @return any\n */\nexport function getObjByPath(obj: any, paths: string[]): any {\n    for (const v of paths) {\n        if (!obj.hasOwnProperty(v)) {\n            return null\n        }\n        obj = obj[v]\n    }\n    return obj\n}\n\n/**\n * 根据path更新Object\n * @param obj\n * @param paths\n * @param value\n * @return any\n */\nexport function updateObjByPath(obj: any, paths: string[], value: any): any {\n    const pl = paths.length\n    if (pl === 0) {\n        return obj\n    }\n    let newObj: any = Array.isArray(obj) ? [] : {}\n    let exist: boolean = pl > 1\n    for (const k in obj) {\n        if (!obj.hasOwnProperty(k)) {\n            continue\n        }\n        const v = obj[k]\n        if (paths[0] === k) {\n            if (pl === 1) {\n                exist = true\n                newObj[k] = value\n                continue\n            }\n            if (typeof v === 'object') {\n                newObj[k] = updateObjByPath(v, paths.slice(1), value)\n                continue\n            }\n        }\n        newObj[k] = v\n    }\n    if (!exist) {\n        newObj[paths[0]] = value\n    }\n    return newObj\n}\n\n/**\n * 首字母小写\n * @param str\n * @return string\n */\nexport function strToLowerCase(str: string): string {\n    return str.replace(str[0], str[0].toLowerCase())\n}\n\n/**\n * 生成随机字符串\n * @param length\n * @return string\n */\nexport function randomString(length: number): string {\n    const chars: string = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    let result = ''\n    for (let i = length; i > 0; --i) result += chars[Math.floor(Math.random() * chars.length)]\n    return result\n}\n\n/**\n * object根据key排序\n * @param obj\n */\nfunction sortObj(obj: any): any {\n    let newObj: any = {};\n    Object.keys(obj).sort().map((key: any) => newObj[key] = obj[key])\n    return newObj\n}\n\n/**\n * 根据初始结构集补全树结构集缺失数据\n * @param sources\n * @return SourceNode[]\n */\nexport function nodeSetToTreeNodeSet(sources: SourceNode[]): SourceNode[] {\n    let full: SourceNode[] = []\n    for (const v of sources) {\n        const node = {...v}\n        if (node.type === SourceType.Array) {\n            const arrSource: Source = {\n                name: ArrayNode,\n                desc: '数组节点',\n                title: ArrayNode,\n                must: true,\n            }\n            if (node.items.length > 0) {\n                arrSource.type = SourceType.Object\n                arrSource.items = nodeSetToTreeNodeSet(node.items)\n            }\n            node.items = [sourceToNode(arrSource)]\n        } else {\n            node.items = nodeSetToTreeNodeSet(node.items)\n        }\n        full.push(node)\n    }\n    return full\n}\n\nexport function getNodeByPathWithTree(path: string, nodes: SourceNode[]): SourceNode | null {\n    const paths = path.split('.')\n    let node: SourceNode | null = null\n    for (const v of paths) {\n        node = null\n        // 过滤数组key，非数字会返回NaN\n        const index = parseFloat(v)\n        if (index >= 0) {\n            node = nodes[0]\n        } else {\n            for (const item of nodes) {\n                if (item.name === v) {\n                    node = item\n                    break\n                }\n            }\n        }\n        if (!node) break\n        nodes = node.items\n    }\n    return node\n}\n\n/**\n * 根据key获取树节点信息\n * @param key\n * @param nodes\n * @return TNode | null\n */\nexport function getTreeNodeByPath(key: string, nodes: any[]): any {\n    let node: any\n    for (const item of nodes) {\n        if (item.key === key) return item\n        node = getTreeNodeByPath(key, item.children)\n        if (node) return node\n    }\n    return node\n}\n\n/**\n * 根据key更新树节点信息\n * @param key\n * @param nodes\n * @param value\n * @return TNode[]\n */\nexport function updateTreeNodeByPath(key: string, nodes: TNode[], value: TNode | null): TNode[] {\n    let newNodes: TNode[] = []\n    for (const node of nodes) {\n        let newNode = {...node}\n        if (newNode.key === key) {\n            if (value) newNodes.push(value)\n            continue\n        }\n        newNode.children = updateTreeNodeByPath(key, newNode.children, value)\n        newNodes.push(newNode)\n    }\n    return newNodes\n}\n\n/**\n * obj转yaml\n * @param obj\n * @return string\n */\nexport function objToYaml(obj: any): string {\n    let str = ''\n    // 处理首次循环，获取类型拼接kind\n    for (const key in obj) {\n        if (!obj.hasOwnProperty(key)) continue\n        str += `---\\n`\n        str += jsyaml.safeDump(sortObj(obj[key]))\n    }\n    str += str !== '' ? '---' : ''\n    return str\n}\n\n/**\n * yaml转obj\n * @param str\n * @return any\n */\nexport function yamlToObjMulti(str: string): any {\n    let obj: any = {}\n    // maybe object or array\n    const arr = jsyaml.safeLoadAll(str)\n    for (const item of arr) {\n        if (!item) continue\n        // 处理kind\n        if (!item.hasOwnProperty('kind')) continue\n        const key = item.kind + '-' + randomString(6)\n        obj[key] = item\n    }\n    return obj\n}\n","import React from \"react\";\nimport {Button, Input, message, Popover, Select, Tree} from \"antd\";\nimport {MinusCircleOutlined, PlusCircleOutlined, PlusSquareOutlined} from '@ant-design/icons'\nimport KindList from \"./KindList\";\nimport {ArrayNode, ND, SourceNode, SourceType, TNode} from \"../base/base\";\nimport {\n    getTreeNodeByPath,\n    objToYaml,\n    randomString,\n    updateTreeNodeByPath, yamlToObjMulti,\n} from \"../base\";\nimport TextArea from \"antd/lib/input/TextArea\";\nimport {InfoParamsType, tree} from \"../api/resource\";\n\nclass CTree extends React.Component<any, any> {\n\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            kindRef: React.createRef(),\n            data: [],\n            expandedKeys: [],\n        }\n    }\n\n    /**\n     * 构建完整数据结构\n     * @param data 元数据\n     * @param prefix 额外添加的前缀\n     * @param cutPrefix 需要被替换的前缀\n     */\n    buildFullData = (data: any, prefix: string = '', cutPrefix: string = ''): any => {\n        if (prefix === '') prefix = randomString(6)\n        let result: any = {}\n        for (let k in data) {\n            if (!data.hasOwnProperty(k)) continue\n            result[k] = data[k]\n        }\n        result.children = []\n        result._children = []\n        let children = data.children\n        if (data._children && data._children.length > 0) children = data._children\n        for (let k in children) {\n            if (!children.hasOwnProperty(k)) continue\n            result._children.push(this.buildFullData(children[k], prefix, cutPrefix))\n        }\n        if (data.required && data.required.length > 0) {\n            for (let vv of data.children) {\n                if (data.required.indexOf(vv.name) === -1) continue\n                let child = this.buildFullData(vv, prefix, cutPrefix)\n                child.stats = {\n                    isRequired: true,\n                    isEdit: true,\n                }\n                // 设置默认字段不允许编辑\n                if (['root.apiVersion', 'root.kind'].indexOf(child.key) !== -1) child.stats.isEdit = false\n                result.children.push(child)\n            }\n        }\n\n        // 添加节点状态\n        if (!result.stats) result.stats = {\n            isRequired: false,\n            isEdit: true,\n        }\n        // 重构节点唯一key\n        if (cutPrefix !== '') {\n            result.key = result.key.replace(cutPrefix, prefix)\n        } else {\n            result.key = prefix + '.' + result.key\n        }\n        // 构建Base Element元素标题\n        switch (result.type) {\n            case 'array':\n                result.title = this.createAppendArrayNode(\n                    result.key,\n                    this.createMenuTitle(result.key, result)\n                )\n                break\n            case 'object': // 对象节点，object string/string\n                if (result._children.length === 0) {\n                    result.title = this.createAppendObjectNode(result.key, result)\n                } else {\n                    result.title = this.createMenuTitle(result.key, result)\n                }\n                break\n            case 'boolean':\n                const options: ND[] = [\n                    {name: 'true', desc: 'true'},\n                    {name: 'false', desc: 'false'},\n                ]\n                result.title = this.createPrefixNode(\n                    this.createMenuTitle(result.key, result),\n                    this.createSelectNode(result.key, options, result.value)\n                )\n                break\n            default:\n                // 构建Select Element元素标题\n                if (result.enums && result.enums.length > 0) {\n                    let options: ND[] = []\n                    for (const v of result.enums) {\n                        options.push({\n                            name: v,\n                            desc: v,\n                        })\n                    }\n                    result.title = this.createPrefixNode(\n                        this.createMenuTitle(result.key, result),\n                        this.createSelectNode(result.key, options, result.value)\n                    )\n                } else {\n                    result.title = this.createPrefixNode(\n                        this.createMenuTitle(result.key, result),\n                        this.createInputNode(result.key, result.value)\n                    )\n                }\n                break\n        }\n        return result\n    }\n\n    buildFullDataWithObj = (data: any, prefix: string = '', cutPrefix: string = '', obj: any = {}): any => {\n        if (prefix === '') prefix = randomString(6)\n        let result: any = {}\n        for (let k in data) {\n            if (!data.hasOwnProperty(k)) continue\n            result[k] = data[k]\n        }\n        result.children = []\n        result._children = []\n        let children = data.children\n        if (data._children && data._children.length > 0) children = data._children\n        for (let k in children) {\n            if (!children.hasOwnProperty(k)) continue\n            const v = children[k]\n            result._children.push(this.buildFullData(v, prefix, cutPrefix))\n\n            if (!obj || !obj.hasOwnProperty(v.name)) continue\n            result.children.push(this.buildFullDataWithObj(v, prefix, cutPrefix, obj[v.name]))\n        }\n\n        if (data.required && data.required.length > 0 && !obj) {\n            for (let vv of data.children) {\n                if (data.required.indexOf(vv.name) === -1) continue\n                let child = this.buildFullData(vv, prefix, cutPrefix)\n                child.stats = {\n                    isRequired: true,\n                    isEdit: true,\n                }\n                // 设置默认字段不允许编辑\n                if (['root.apiVersion', 'root.kind'].indexOf(child.key) !== -1) child.stats.isEdit = false\n                result.children.push(child)\n            }\n        }\n\n        // 添加节点状态\n        if (!result.stats) result.stats = {\n            isRequired: false,\n            isEdit: true,\n        }\n        // 重构节点唯一key\n        if (cutPrefix !== '') {\n            result.key = result.key.replace(cutPrefix, prefix)\n        } else {\n            result.key = prefix + '.' + result.key\n        }\n        // 构建Base Element元素标题\n        switch (result.type) {\n            case 'array':\n                result.title = this.createAppendArrayNode(\n                    result.key,\n                    this.createMenuTitle(result.key, result)\n                )\n                if (obj) {\n                    for (const k in obj) {\n                        if (!obj.hasOwnProperty(k)) continue\n                        // 默认构建普通数组节点\n                        const tNode = this.buildFullDataWithObj(\n                            result._children[0],\n                            result.key + '.' + k,\n                            result.key,\n                            obj[k]\n                        )\n                        result.children.push(tNode)\n                    }\n                }\n                break\n            case 'object': // 对象节点，object string/string\n                if (result._children.length > 0) {\n                    result.title = this.createMenuTitle(result.key, result)\n                    break\n                }\n                result.title = this.createAppendObjectNode(result.key, result)\n                if (obj) {\n                    for (const k in obj) {\n                        if (!obj.hasOwnProperty(k)) continue\n                        const key = result.key + '.' + randomString(6)\n                        result.children.push({\n                            key,\n                            name: k,\n                            title: this.createKVInputNode(key, k, obj[k]),\n                            type: SourceType.String,\n                            value: obj[k],\n                            children: [],\n                        })\n                    }\n                }\n                break\n            case 'boolean':\n                result.value = obj ? obj : result.value\n                const options: ND[] = [\n                    {name: 'false', desc: 'false'},\n                    {name: 'true', desc: 'true'},\n                ]\n                result.title = this.createPrefixNode(\n                    this.createMenuTitle(result.key, result),\n                    this.createSelectNode(result.key, options, result.value)\n                )\n                break\n            default:\n                result.value = obj ? obj : result.value\n                // 构建Select Element元素标题\n                if (result.enums && result.enums.length > 0) {\n                    let options: ND[] = []\n                    for (const v of result.enums) {\n                        options.push({\n                            name: v,\n                            desc: v,\n                        })\n                    }\n                    result.title = this.createPrefixNode(\n                        this.createMenuTitle(result.key, result),\n                        this.createSelectNode(result.key, options, result.value)\n                    )\n                } else {\n                    result.title = this.createPrefixNode(\n                        this.createMenuTitle(result.key, result),\n                        this.createInputNode(result.key, result.value)\n                    )\n                }\n                break\n        }\n        return result\n    }\n\n    /**\n     * 生成Yaml字符串\n     */\n    convertToYaml = () => {\n        if (this.props.buildYamlData) {\n            let data: any[] = []\n            for (const v of this.state.data) {\n                const item = this.parseTreeToObj([v])\n                data.push(item)\n            }\n            const yamlData = objToYaml(data)\n            this.props.buildYamlData(yamlData)\n        }\n    }\n\n    /**\n     * yaml生成树结构\n     * @param code\n     */\n    convertToTreeData = (code: string) => {\n        let obj: any\n        try {\n            obj = yamlToObjMulti(code)\n        } catch (e) {\n            message.error('Yaml格式错误')\n            return\n        }\n        const that = this\n        for (const k in obj) {\n            if (!obj.hasOwnProperty(k)) continue\n            const v = obj[k]\n            const apiVersion = v.apiVersion\n            const kind = v.kind\n            const versionData = apiVersion.split('/')\n            if (versionData.length === 1) versionData.unshift('core')\n            const params: InfoParamsType = {\n                kind,\n                group: versionData[0],\n                version: versionData[1],\n            }\n            tree(params).then(function (result: any) {\n                if (!result) return\n                const fullData = that.buildFullDataWithObj(result, '', '', v)\n                const data = [...that.state.data, fullData]\n                that.setState({data, expandedKeys: that.getExpandedKeys(data)})\n            }).catch(function (reason) {\n                console.log(reason)\n            })\n        }\n    }\n\n    /**\n     * 获取kind对应的渲染数据，并向数据集中增加一组\n     * @param group\n     * @param kind\n     * @param version\n     */\n    generateResource = (group: string, kind: string, version: string) => {\n        const that = this\n        const params: InfoParamsType = {group, kind, version}\n        tree(params).then(function (result: any) {\n            if (!result) return\n            const fullData = that.buildFullData(result)\n            const data = [...that.state.data, fullData]\n            that.setState({data, expandedKeys: that.getExpandedKeys(data)})\n        })\n    }\n\n    /**\n     * tree转obj\n     * @param nodes\n     * @return any\n     */\n    parseTreeToObj = (nodes: any[]): any => {\n        let obj: any = {}\n        for (const v of nodes) {\n            switch (v.type) {\n                case SourceType.Object:\n                    obj[v.name] = this.parseTreeToObj(v.children)\n                    if (v.name === 'root') obj = obj[v.name]\n                    break\n                case SourceType.Array:\n                    let arr = []\n                    for (const va of v.children) {\n                        if (va.type === SourceType.Object) {\n                            if (va.children.length > 0) arr.push(this.parseTreeToObj(va.children))\n                        } else {\n                            if (va.value !== '') arr.push(va.value)\n                        }\n                    }\n                    obj[v.name] = arr\n                    break\n                default:\n                    if (v.name !== '') obj[v.name] = v.value\n                    break\n            }\n        }\n        return obj\n    }\n\n    // 添加text节点\n    createTextNode = (path: string, source: SourceNode) => {\n        return <TextArea data-path={path} onChange={this.changeInputValue} defaultValue={source.value}/>\n    }\n\n    /**\n     * 添加select节点\n     * @param selectData\n     * @param path\n     * @param value\n     * @return React.ReactNode\n     */\n    createSelectNode = (path: string, selectData: ND[], value: string = '') => {\n        let optionData = []\n        for (const v of selectData) {\n            optionData.push({\n                label: v.name,\n                value: JSON.stringify({value: v.name, path})\n            })\n        }\n        const defaultValue = JSON.stringify({\n            value: value === '' ? selectData[0].name : value,\n            path\n        })\n        return <Select\n            defaultValue={defaultValue}\n            className=\"selectStyle\"\n            onChange={this.changeSelectValue}\n            key={path + randomString(3)}\n            options={optionData}\n        />\n    }\n\n    /**\n     * 添加input文本节点\n     * @param path\n     * @param value\n     * @return React.ReactNode\n     */\n    createInputNode = (path: string, value: string = '') => {\n        return <Input data-path={path} onChange={this.changeInputValue} defaultValue={value}/>\n    }\n\n    /**\n     * 添加K/V input文本节点\n     * @param path\n     * @param name\n     * @param value\n     * @return React.ReactNode\n     */\n    createKVInputNode = (path: string, name: string = '', value: string = '') => {\n        return this.createPrefixNode(<Input\n            data-path={path}\n            style={{width: '150px', height: '80%'}}\n            onChange={e => this.changeInputValue(e, false)}\n            defaultValue={name}\n        />, this.createDeleteNode(path, this.createInputNode(path, value)))\n    }\n\n    /**\n     * 添加数组input文本节点\n     * @param path\n     */\n    createArrInputNode = (path: string) => this.createPrefixNode(ArrayNode, this.createDeleteNode(path, this.createInputNode(path)))\n\n    /**\n     * 创建移除节点按钮\n     * @param path\n     * @param node\n     */\n    createDeleteNode = (path: string, node: React.ReactNode) => {\n        return (<>\n            <span className=\"floatLeft\">{node}</span>\n            <span className=\"floatLeft\">\n                <Button\n                    data-path={path}\n                    type='link'\n                    icon={<MinusCircleOutlined/>}\n                    danger\n                    onClick={this.removeObjItem}\n                />\n            </span>\n        </>)\n    }\n\n    /**\n     * 添加数组按钮节点\n     * @param path\n     * @param node\n     * @return React.ReactNode\n     */\n    createAppendArrayNode = (path: string, node: React.ReactNode) => {\n        return (\n            <div className=\"flex\">\n                <span className=\"f1\">{node}</span>\n                <Button\n                    className=\"f1\"\n                    data-path={path}\n                    type=\"link\"\n                    icon={<PlusCircleOutlined/>}\n                    style={{marginTop: '-4px'}}\n                    onClick={this.addArrItem}\n                />\n            </div>\n        )\n    }\n\n    /**\n     * 添加对象按钮节点\n     * @param path\n     * @param source\n     * @return React.ReactNode\n     */\n    createAppendObjectNode = (path: string, source: SourceNode) => {\n        return (\n            <div className=\"flex\">\n                <span className=\"f1\">{this.createMenuTitle(path, source)}</span>\n                <Button\n                    className=\"f1\"\n                    data-path={path}\n                    type=\"link\"\n                    icon={<PlusSquareOutlined/>}\n                    style={{marginTop: '-4px'}}\n                    onClick={this.addObjItem}\n                />\n            </div>\n        )\n    }\n\n    /**\n     * 创建节点前缀\n     * @param name\n     * @param node\n     * @return React.ReactNode\n     */\n    createPrefixNode = (name: React.ReactNode, node: React.ReactNode) => {\n        return (\n            <span className=\"ant-input-wrapper ant-input-group\">\n                <span className=\"ant-input-group-addon\"> {name} </span>\n                <span> {node} </span>\n            </span>\n        )\n    }\n\n    /**\n     * 构建标题\n     * @param title\n     * @param tipContent\n     * @param key\n     * @return React.ReactNode\n     */\n    createTitle = (title: React.ReactNode, tipContent: string, key: number = 0) => {\n        if (tipContent === '') return title\n        return <Popover\n            content={tipContent}\n            trigger=\"hover\"\n            arrowPointAtCenter\n            key={key}\n        > {title} </Popover>\n    }\n\n    // 构建移除菜单\n    createDeleteMenu = (path: string, isArray: boolean = false) => {\n        return <Button\n            key=\"del\"\n            data-path={path}\n            className=\"ml2\"\n            type=\"primary\"\n            onClick={isArray ? this.removeObjItem : this.removeItem}\n\n            style={{margin: '5px'}}\n            danger\n        > delete </Button>\n    }\n\n    /**\n     * 构建子项菜单\n     * @param path 节点唯一路径标识\n     * @param source 该节点数据集\n     * @param childs 该节点当前渲染的子节点集合\n     * @return React.ReactNode\n     */\n    createMenuTitle = (path: string, source: any, childs: string[] = []) => {\n        // 获取未渲染的子项\n        let desc = ''\n        if (source.descs && source.descs.length > 0) desc = source.descs[0].desc\n        let notExistChildren = []\n        for (const item of source.children) childs.push(item.name)\n        for (const item of source._children) if (childs.indexOf(item.name) === -1) notExistChildren.push(item)\n        // 如果子项都渲染过并且为required节点， 则直接返回\n        if (notExistChildren.length === 0 && source.stats.isRequired) return this.createTitle(source.name, desc)\n        // 渲染不存在子项选择\n        let set = notExistChildren.map((child, index) => {\n            // TODO 支持根据zh/en自动识别渲染\n            let desc = ''\n            if (child.descs && child.descs.length > 0) desc = child.descs[0].desc\n            return this.createTitle(<Button\n                data-path={path}\n                data-name={child.name}\n                className=\"ml2\"\n                type=\"primary\"\n                key={index}\n                onClick={this.addItemFromMenu}\n                style={{margin: '5px'}}\n            > {child.name} </Button>, desc, index)\n        })\n        // 不是required节点或者数组节点，构建基础菜单\n        if (!source.stats.isRequired) set.unshift(this.createDeleteMenu(path, source.type === 'array'))\n        if (source.type === 'array') set = [this.createDeleteMenu(path, source.type === 'array')]\n        return this.createTitle(<Popover\n            trigger=\"click\"\n            content={<div style={{maxWidth: '500px'}}>{set}</div>}\n            arrowPointAtCenter\n        > {source.name} </Popover>, desc)\n    }\n\n    /**\n     * 同步菜单项\n     * @param path\n     * @param addSet  需要添加的子项菜单名\n     * @param delSet  需要移除的子项菜单名\n     */\n    syncItemMenu = (path: string, addSet: string[] = [], delSet: string[] = []) => {\n        // 获取选中节点\n        const node = getTreeNodeByPath(path, this.state.data)\n        if (!node) return\n        let expandedKeys = this.state.expandedKeys\n\n        // 添加或移除子项\n        const children = [...node.children]\n        for (const s of node._children) {\n            if (delSet.indexOf(s.name) > -1) {\n                let delStatus = true\n                for (const c of children) {\n                    if (c.name === s.name) {\n                        delStatus = false\n                        break\n                    }\n                }\n                if (delStatus) {\n                    children.push(s)\n                    if (expandedKeys.indexOf(s.key) === -1) expandedKeys.push(s.key)\n                }\n            }\n            if (addSet.indexOf(s.name) > -1) {\n                let addIndex = -1\n                for (const ck in children) {\n                    if (children[ck].name === s.name) {\n                        addIndex = parseInt(ck)\n                        break\n                    }\n                }\n                children.splice(addIndex, 1)\n            }\n        }\n        let cs = []\n        for (const v of children) cs.push(v.name)\n        node.title = this.createMenuTitle(path, node, cs)\n        node.children = children\n        if (expandedKeys.indexOf(node.key) === -1) expandedKeys.push(node.key)\n        // 更新选中节点\n        const data = updateTreeNodeByPath(path, this.state.data, node)\n        this.setState({data, expandedKeys})\n    }\n\n    addItemFromMenu = (e: any) => {\n        const path = e.target.getAttribute('data-path')\n        const name = e.target.getAttribute('data-name')\n        this.syncItemMenu(path, [], [name])\n    }\n\n    /**\n     * 添加arr节点子项\n     * @param e\n     */\n    addArrItem = (e: any) => {\n        const path = e.currentTarget.getAttribute('data-path')\n        // 根据path获取到tree的数组节点\n        const node = getTreeNodeByPath(path, this.state.data)\n        if (!node || node._children.length === 0) return\n        // 获取实际渲染数组节点数量\n        const nodeChildNum = node.children.length\n        // 默认构建普通数组节点\n        const keyPath = path + '.' + nodeChildNum\n        let tNode = {...node._children[0]}\n        tNode.key = nodeChildNum\n        // 数组节点添加需要重新构造添加后的所有子项key\n        let expandedKeys = this.state.expandedKeys\n        if (tNode.type === 'object') {\n            tNode = this.buildFullData(node._children[0], keyPath, path)\n            if (expandedKeys.indexOf(node.key) === -1) expandedKeys.push(node.key)\n            if (expandedKeys.indexOf(tNode.key) === -1) expandedKeys.push(tNode.key)\n        }\n        node.children.push(tNode)\n        // 根据path更新tree\n        const data = updateTreeNodeByPath(path, this.state.data, node)\n        this.setState({data, expandedKeys})\n    }\n\n    /**\n     * 添加obj节点子项\n     * @param e\n     */\n    addObjItem = (e: any) => {\n        const path = e.currentTarget.getAttribute('data-path')\n        // 根据path获取tree节点信息\n        const node = getTreeNodeByPath(path, this.state.data)\n        if (!node) return\n        const key = path + '.' + randomString(6)\n        const tNode = {\n            key,\n            name: '',\n            title: this.createKVInputNode(key),\n            type: SourceType.String,\n            value: '',\n            children: [],\n        }\n        let expandedKeys = this.state.expandedKeys\n        if (expandedKeys.indexOf(path) === -1) expandedKeys.push(path)\n        node.children.push(tNode)\n        const data = updateTreeNodeByPath(path, this.state.data, node)\n        this.setState({data, expandedKeys})\n    }\n\n    /**\n     * 移除节点数组/KV子项\n     * @param e\n     */\n    removeObjItem = (e: any) => {\n        const path = e.currentTarget.getAttribute('data-path')\n        const node = getTreeNodeByPath(path, this.state.data)\n        if (!node) return\n        let data = updateTreeNodeByPath(path, this.state.data, null)\n        this.setState({data})\n    }\n\n    /**\n     * 移除节点子项\n     * @param e\n     */\n    removeItem = (e: any) => {\n        const path = e.target.getAttribute('data-path')\n        const node = getTreeNodeByPath(path, this.state.data)\n        if (!node) return\n        let data = updateTreeNodeByPath(path, this.state.data, null)\n        this.setState({data})\n        // 存在父节点，更新menu\n        const pathArr = path.split('.')\n        const pathLen = pathArr.length\n        if (pathLen === 1) return\n        const parentPath = pathArr.slice(0, pathLen - 1).join('.')\n        this.syncItemMenu(parentPath, [node.name])\n    }\n\n    /**\n     * 修改select内容\n     * @param val\n     */\n    changeSelectValue = (val: string) => {\n        const valObj = JSON.parse(val)\n        const node = getTreeNodeByPath(valObj.path, this.state.data)\n        if (!node) return\n        node.value = valObj.value\n        const data = updateTreeNodeByPath(valObj.path, this.state.data, node)\n        this.setState({data})\n    }\n\n    /**\n     * 修改input内容\n     * @param e\n     * @param isVal\n     */\n    changeInputValue = (e: any, isVal: boolean = true) => {\n        const path = e.target.getAttribute('data-path')\n        const value = e.target.value\n        const node = getTreeNodeByPath(path, this.state.data)\n        if (!node) return\n        isVal ? node.value = value : node.name = value\n        const data = updateTreeNodeByPath(path, this.state.data, node)\n        this.setState({data})\n    }\n\n    /**\n     * 选中树节点\n     * @param selectedKeys\n     * @param e {selected: bool, selectedNodes, node, event}\n     */\n    onSelect = (selectedKeys: any, e: any) => {\n        console.log('onSelect: ', selectedKeys)\n    }\n\n    /**\n     * 展开节点\n     * @param expandedKeys\n     * @param e {expanded: bool, node: TNode}\n     */\n    onExpand = (expandedKeys: any, e: any) => {\n        const currentKey = e.node.key\n        let currentExpandedKeys = []\n        for (const key of expandedKeys) {\n            if (key.indexOf(currentKey) !== -1 && key !== currentKey) continue\n            currentExpandedKeys.push(key)\n        }\n        this.setState({expandedKeys: currentExpandedKeys})\n    }\n\n    /**\n     * 根据树数据获取全部节点key\n     * @param nodes\n     */\n    getExpandedKeys = (nodes: TNode[]) => {\n        let expandedKeys: string[] = []\n        for (const node of nodes) expandedKeys.push(node.key, ...this.getExpandedKeys(node.children))\n        return expandedKeys\n    }\n\n    /**\n     * 折叠所有节点\n     */\n    foldAll = () => this.setState({expandedKeys: []})\n\n    /**\n     * 展开所有节点\n     */\n    unfoldAll = () => this.setState({expandedKeys: this.getExpandedKeys(this.state.data)})\n\n    render() {\n        return (\n            <div className={this.props.className}>\n                <KindList\n                    ref={this.state.kindRef}\n                    generateResource={this.generateResource}\n                />\n                <Tree\n                    className=\"treeStyle\"\n                    onSelect={this.onSelect}\n                    onExpand={this.onExpand}\n                    showLine={true}\n                    treeData={this.state.data}\n                    expandedKeys={this.state.expandedKeys}\n                />\n            </div>\n        )\n    }\n}\n\nexport default CTree\n","import React from \"react\";\nimport {message, Affix, Button, Popover, Drawer} from \"antd\";\nimport {\n    PlusSquareOutlined,\n    MinusSquareOutlined,\n    CopyOutlined,\n    DownloadOutlined,\n    DoubleLeftOutlined,\n    DoubleRightOutlined,\n    SettingOutlined\n} from '@ant-design/icons'\nimport './index.css'\nimport {randomString} from \"../base\";\n\nclass NavBar extends React.Component<any, any> {\n\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            top: 0,\n            configVisible: false,\n        }\n    }\n\n    /**\n     * 折叠\n     */\n    fold = () => {\n        if (this.props.fold) this.props.fold()\n    }\n\n    /**\n     * 展开\n     */\n    unfold = () => {\n        if (this.props.unfold) this.props.unfold()\n    }\n\n    /**\n     * 构建树结构\n     */\n    build = () => {\n        if (this.props.buildData) this.props.buildData()\n    }\n\n    /**\n     * 解析为yaml\n     */\n    parse = () => {\n        if (this.props.parseData) this.props.parseData()\n    }\n\n    /**\n     * 复制\n     */\n    copyData = () => {\n        let text = document.createElement(\"textarea\");    // 直接构建textarea\n        text.value = this.props.data                               // 设置内容\n        document.body.appendChild(text);                           // 添加临时实例\n        text.select();                                             // 选择实例内容\n        document.execCommand(\"Copy\");                  // 执行复制\n        document.body.removeChild(text);                           // 删除临时实例\n    }\n\n    /**\n     * 下载\n     */\n    downloadData = () => {\n        if (!this.props.data) {\n            message.error('无内容可下载')\n            return\n        }\n        const element = document.createElement('a');\n        element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(this.props.data));\n        const filename = randomString(6) + '.yml'\n        element.setAttribute('download', filename);\n        element.style.display = 'none';\n        document.body.appendChild(element);\n        element.click();\n        document.body.removeChild(element);\n    }\n\n    /**\n     * 打开配置\n     */\n    configOpen = () => this.setState({configVisible: true})\n\n    /**\n     * 关闭配置\n     */\n    configClose = () => this.setState({configVisible: false})\n\n    render() {\n        return (<>\n            <Affix offsetTop={this.state.top}>\n                <div className=\"navBar\">\n                    <Popover trigger=\"hover\" content=\"折叠全部\">\n                        <Button className=\"ml2\" type=\"primary\" onClick={this.fold}>\n                            <PlusSquareOutlined/>\n                        </Button>\n                    </Popover>\n                    <Popover trigger=\"hover\" content=\"展开全部\">\n                        <Button className=\"ml2\" type=\"primary\" onClick={this.unfold}>\n                            <MinusSquareOutlined/>\n                        </Button>\n                    </Popover>\n                    <Popover trigger=\"hover\" content=\"解析\">\n                        <Button className=\"ml2\" type=\"primary\" onClick={this.parse}>\n                            <DoubleLeftOutlined/>\n                        </Button>\n                    </Popover>\n                    <Popover trigger=\"hover\" content=\"构建\">\n                        <Button className=\"ml2\" type=\"primary\" onClick={this.build}>\n                            <DoubleRightOutlined/>\n                        </Button>\n                    </Popover>\n                    <Popover trigger=\"hover\" content=\"复制\">\n                        <Button className=\"ml2\" type=\"primary\" onClick={this.copyData}>\n                            <CopyOutlined/>\n                        </Button>\n                    </Popover>\n                    <Popover trigger=\"hover\" content=\"下载\">\n                        <Button className=\"ml2\" type=\"primary\" onClick={this.downloadData}>\n                            <DownloadOutlined/>\n                        </Button>\n                    </Popover>\n                    <Popover trigger=\"hover\" content=\"设置\">\n                        <Button className=\"ml2\" type=\"primary\" onClick={this.configOpen}>\n                            <SettingOutlined/>\n                        </Button>\n                    </Popover>\n                </div>\n            </Affix>\n            <Drawer\n                title=\"高级设置\"\n                placement=\"left\"\n                closable={false}\n                visible={this.state.configVisible}\n                onClose={this.configClose}\n            >\n                <p>敬请期待</p>\n            </Drawer>\n        </>);\n    }\n}\n\nexport default NavBar\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport CTree from \"./components/CTree\";\nimport {UnControlled as CodeMirror} from \"react-codemirror2\";\nimport NavBar from \"./components/NavBar\";\n\nrequire('codemirror/mode/yaml/yaml')\n\nexport default class App extends React.Component<any, any> {\n\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            navBarRef: React.createRef(),\n            cTreeRef: React.createRef(),\n            defaultData: '',\n            codeData: '',\n        }\n    }\n\n    /**\n     * 构建code内容\n     * @param data\n     */\n    buildCodeData = (data: string) => this.setState({defaultData: data})\n\n    render() {\n        return (\n            <div className=\"App\">\n                <NavBar\n                    ref={this.state.navBarRef}\n                    data={this.state.codeData}\n                    fold={() => this.state.cTreeRef.current.foldAll()}\n                    unfold={() => this.state.cTreeRef.current.unfoldAll()}\n                    buildData={() => this.state.cTreeRef.current.convertToYaml()}\n                    parseData={() => {this.state.cTreeRef.current.convertToTreeData(this.state.codeData)}}\n                />\n                <div className=\"flex\">\n                    <CTree\n                        className=\"trees\"\n                        ref={this.state.cTreeRef}\n                        buildYamlData={this.buildCodeData}\n                    />\n                    <CodeMirror\n                        className=\"codes\"\n                        value={this.state.defaultData}\n                        options={{\n                            mode: 'yaml',\n                            theme: 'material',\n                            lineNumbers: true\n                        }}\n                        editorDidMount={(editor) => {\n                            editor.setSize('auto', 500)\n                        }}\n                        onChange={(editor, data, value) => {\n                            this.setState({codeData: value})\n                        }}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}